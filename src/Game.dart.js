// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function() {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.getInterceptor(dartException).toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.StackTrace = {"": "Object;stack",
  toString$0: function() {
    var t1 = this.stack;
    if (typeof t1 !== "string")
      return this.toString$0$bailout0(1, t1);
    return t1;
  },
  toString$0$bailout0: function(state0, t1) {
    return !(t1 == null) ? t1 : "";
  }
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  }
};

$$.Null = {"": "Object;"};

$$.MetaInfo = {"": "Object;_tag>,_tags,_set>"};

$$.JSSyntaxRegExp = {"": "Object;_liblib2$_pattern,_isMultiLine,_isCaseSensitive",
  hasMatch$1: function(str) {
    return $.regExpTest(this, $.checkString(str));
  },
  get$pattern: function() {
    return this._liblib2$_pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  }
};

$$.Collection = {"": "Iterable;",
  is$Collection: function() {
    return true;
  }
};

$$.NullThrownError = {"": "Object;",
  toString$0: function() {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (!(t1 == null))
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function() {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function() {
    var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer_StringBuffer("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
      return this.toString$0$bailout(1, t1, t2);
    for (; $.ltB(t1.i_1, t2.length); t3 = t1.i_1, t1.i_1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, 1)) {
      if ($.gtB(t1.i_1, 0)) {
        t3 = t1.sb_0;
        $.getInterceptor$JSArray(t3).add$1(t3, ", ");
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t5 = $.Error_safeToString(t2[t4]);
      $.getInterceptor$JSArray(t3).add$1(t3, t5);
    }
    t2 = this._namedArguments;
    if (!(t2 == null)) {
      t3 = new $.NoSuchMethodError_toString_anon(t1);
      $.getInterceptor$JSArray(t2).forEach$1(t2, t3);
    }
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
      return this.toString$0$bailout(2, t1, t2);
    t3 = t1.sb_0;
    actualParameters = $.getInterceptor(t3).toString$0(t3);
    t1.sb_0 = $.StringBuffer_StringBuffer("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0) {
        t3 = t1.sb_0;
        $.getInterceptor$JSArray(t3).add$1(t3, ", ");
      }
      t3 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      t4 = t2[i];
      $.getInterceptor$JSArray(t3).add$1(t3, t4);
    }
    t1 = t1.sb_0;
    formalParameters = $.getInterceptor(t1).toString$0(t1);
    t1 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
  },
  toString$0$bailout: function(state0, env0, env1) {
    switch (state0) {
      case 1:
        t2 = env1;
        t1 = env0;
        break;
      case 2:
        t2 = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.StringBuffer_StringBuffer("");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (!(t2 == null))
          for (t3 = $.getInterceptor$JSStringJSArray(t2); $.ltB(t1.i_1, t3.get$length(t2)); t4 = t1.i_1, t1.i_1 = $.getInterceptor$JSNumber(t4).operator$add$1(t4, 1)) {
            if ($.gtB(t1.i_1, 0)) {
              t4 = t1.sb_0;
              $.getInterceptor$JSArray(t4).add$1(t4, ", ");
            }
            t4 = t1.sb_0;
            t5 = $.Error_safeToString(t3.operator$index$1(t2, t1.i_1));
            $.getInterceptor$JSArray(t4).add$1(t4, t5);
          }
        t2 = this._namedArguments;
        if (!(t2 == null)) {
          t3 = new $.NoSuchMethodError_toString_anon(t1);
          $.getInterceptor$JSArray(t2).forEach$1(t2, t3);
        }
        t2 = this._existingArgumentNames;
      case 2:
        var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
        else {
          t3 = t1.sb_0;
          actualParameters = $.getInterceptor(t3).toString$0(t3);
          t1.sb_0 = $.StringBuffer_StringBuffer("");
          for (t3 = $.getInterceptor$JSStringJSArray(t2), i = 0; $.ltB(i, t3.get$length(t2)); ++i) {
            if (i > 0) {
              t4 = t1.sb_0;
              $.getInterceptor$JSArray(t4).add$1(t4, ", ");
            }
            t4 = t1.sb_0;
            t5 = t3.operator$index$1(t2, i);
            $.getInterceptor$JSArray(t4).add$1(t4, t5);
          }
          t1 = t1.sb_0;
          formalParameters = $.getInterceptor(t1).toString$0(t1);
          t1 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
        }
    }
  }
};

$$.UnsupportedError = {"": "Object;message>",
  toString$0: function() {
    return "Unsupported operation: " + $.S(this.get$message());
  }
};

$$.UnimplementedError = {"": "Object;message>",
  toString$0: function() {
    var t1 = this.message;
    return !(t1 == null) ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function() {
    return "Bad state: " + this.message;
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function() {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function() {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  is$Exception: true
};

$$.FormatException = {"": "Object;message",
  toString$0: function() {
    return "FormatException: " + $.S(this.message);
  },
  is$Exception: true
};

$$.IllegalJSRegExpException = {"": "Object;_pattern,_errmsg",
  toString$0: function() {
    return "IllegalJSRegExpException: '" + $.S(this._pattern) + "' '" + this._errmsg + "'";
  },
  is$Exception: true
};

$$.Iterable = {"": "Object;",
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(separator) {
    var iterator, buffer, t1, t2;
    if (typeof separator !== "string")
      return this.join$1$bailout(1, separator);
    iterator = $.getInterceptor$JSArray(this).get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer_StringBuffer("");
    if (separator === "")
      do {
        t1 = $.S(iterator.get$current());
        $.getInterceptor$JSArray(buffer).add$1(buffer, t1);
      } while (iterator.moveNext$0() === true);
    else {
      t1 = $.S(iterator.get$current());
      t2 = $.getInterceptor$JSArray(buffer);
      t2.add$1(buffer, t1);
      for (; iterator.moveNext$0() === true;) {
        t2.add$1(buffer, separator);
        t2.add$1(buffer, $.S(iterator.get$current()));
      }
    }
    return $.getInterceptor(buffer).toString$0(buffer);
  },
  join$1$bailout: function(state0, separator) {
    var iterator, buffer, t1, t2;
    iterator = $.getInterceptor$JSArray(this).get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer_StringBuffer("");
    if (separator == null || $.eqB(separator, ""))
      do {
        t1 = $.S(iterator.get$current());
        $.getInterceptor$JSArray(buffer).add$1(buffer, t1);
      } while (iterator.moveNext$0() === true);
    else {
      t1 = $.S(iterator.get$current());
      t2 = $.getInterceptor$JSArray(buffer);
      t2.add$1(buffer, t1);
      for (; iterator.moveNext$0() === true;) {
        t2.add$1(buffer, separator);
        t2.add$1(buffer, $.S(iterator.get$current()));
      }
    }
    return $.getInterceptor(buffer).toString$0(buffer);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$length: function() {
    var it, count;
    it = $.getInterceptor$JSArray(this).get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function() {
    return $.getInterceptor$JSArray(this).get$iterator(this).moveNext$0() !== true;
  },
  get$last: function() {
    var it, result;
    it = $.getInterceptor$JSArray(this).get$iterator(this);
    if (it.moveNext$0() !== true)
      throw $.$$throw($.StateError$("No elements"));
    do
      result = it.get$current();
    while (it.moveNext$0() === true);
    return result;
  }
};

$$.Iterator = {"": "Object;"};

$$._HashMapImpl = {"": "Object;_keys>,_values>,_loadLimit,_numberOfEntries,_numberOfDeleted",
  _probeForAdding$1: function(key) {
    var t1, hash, insertionIndex, numberOfProbes, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.getInterceptor(key).get$hashCode(key);
    if (t1 !== (t1 | 0))
      return this._probeForAdding$1$bailout(1, key, t1);
    hash = (t1 & this._keys.length - 1) >>> 0;
    for (insertionIndex = -1, numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null) {
        if (insertionIndex < 0)
          return hash;
        return insertionIndex;
      } else if ($.eqB(existingKey, key))
        return hash;
      else if (insertionIndex < 0 && existingKey === $.CONSTANT3)
        insertionIndex = hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
      if (hash !== (hash | 0))
        return this._probeForAdding$1$bailout(2, hash, key, numberOfProbes0, insertionIndex);
    }
  },
  _probeForAdding$1$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env1;
        key = env0;
        break;
      case 2:
        insertionIndex = env3;
        numberOfProbes0 = env2;
        key = env1;
        hash = env0;
        break;
    }
    switch (state0) {
      case 0:
        if (key == null)
          throw $.$$throw($.ArgumentError$(null));
        t1 = $.getInterceptor(key).get$hashCode(key);
      case 1:
        state0 = 0;
        t3 = this._keys.length - 1;
        hash = $.getInterceptor$JSNumber(t1).operator$and$1(t1, t3);
        insertionIndex = -1;
        numberOfProbes = 1;
      case 2:
        var t1, key, t3, hash, insertionIndex, numberOfProbes, existingKey, numberOfProbes0;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t1 = this._keys;
                if (hash !== (hash | 0))
                  throw $.iae(hash);
                if (hash < 0 || hash >= t1.length)
                  throw $.ioore(hash);
                existingKey = t1[hash];
                if (existingKey == null) {
                  if (insertionIndex < 0)
                    return hash;
                  return insertionIndex;
                } else if ($.eqB(existingKey, key))
                  return hash;
                else if (insertionIndex < 0 && existingKey === $.CONSTANT3)
                  insertionIndex = hash;
                numberOfProbes0 = numberOfProbes + 1;
                hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
              case 2:
                state0 = 0;
                numberOfProbes = numberOfProbes0;
            }
    }
  },
  _probeForLookup$1: function(key) {
    var t1, t2, hash, numberOfProbes, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.getInterceptor(key).get$hashCode(key);
    t2 = this._keys.length - 1;
    hash = $.getInterceptor$JSNumber(t1).operator$and$1(t1, t2);
    if (hash !== (hash | 0))
      return this._probeForLookup$1$bailout(1, key, hash);
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.eqB(existingKey, key))
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    }
  },
  _probeForLookup$1$bailout: function(state0, key, hash) {
    var numberOfProbes, t1, existingKey, numberOfProbes0;
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.eqB(existingKey, key))
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    }
  },
  _ensureCapacity$0: function() {
    var t1, newNumberOfEntries, capacity, numberOfFreeOrDeleted;
    t1 = this._numberOfEntries;
    newNumberOfEntries = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
    if ($.geB(newNumberOfEntries, this._loadLimit)) {
      this._grow$1(this._keys.length * 2);
      return;
    }
    capacity = this._keys.length;
    if (typeof newNumberOfEntries !== "number")
      throw $.iae(newNumberOfEntries);
    numberOfFreeOrDeleted = capacity - newNumberOfEntries;
    t1 = this._numberOfDeleted;
    if (t1 > numberOfFreeOrDeleted - t1)
      this._grow$1(capacity);
  },
  _grow$1: function(newCapacity) {
    var capacity, t1, oldKeys, oldValues, i, key, value, newIndex;
    capacity = this._keys.length;
    t1 = $.getInterceptor$JSNumber(newCapacity).operator$mul$1(newCapacity, 3);
    this._loadLimit = $.getInterceptor$JSNumber(t1).operator$tdiv$1(t1, 4);
    oldKeys = this._keys;
    oldValues = this._values;
    this._keys = $.List_List$fixedLength(newCapacity, null);
    this._values = $.List_List$fixedLength(newCapacity, null);
    for (i = 0; i < capacity; ++i) {
      if (i >= oldKeys.length)
        throw $.ioore(i);
      key = oldKeys[i];
      if (key == null || key === $.CONSTANT3)
        continue;
      if (i >= oldValues.length)
        throw $.ioore(i);
      value = oldValues[i];
      newIndex = this._probeForAdding$1(key);
      t1 = this._keys;
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = key;
      t1 = this._values;
      if (newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = value;
    }
    this._numberOfDeleted = 0;
  },
  clear$0: function() {
    var t1, length$, t2, t3, i;
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    t1 = this._keys;
    length$ = t1.length;
    for (t2 = this._values, t3 = t2.length, i = 0; i < length$; ++i) {
      t1[i] = null;
      if (i >= t3)
        throw $.ioore(i);
      t2[i] = null;
    }
  },
  operator$indexSet$2: function(key, value) {
    var index, t1;
    this._ensureCapacity$0();
    index = this._probeForAdding$1(key);
    t1 = this._keys;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1 = t1[index];
    if (t1 == null || t1 === $.CONSTANT3) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.operator$indexSet$2$bailout1(1, key, value, index, t1);
      this._numberOfEntries = t1 + 1;
    }
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = key;
    t1 = this._values;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  operator$indexSet$2$bailout1: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env3;
        index = env2;
        value = env1;
        key = env0;
        break;
    }
    switch (state0) {
      case 0:
        this._ensureCapacity$0();
        index = this._probeForAdding$1(key);
        t1 = this._keys;
        if (index !== (index | 0))
          throw $.iae(index);
        if (index < 0 || index >= t1.length)
          throw $.ioore(index);
        t1 = t1[index];
      case 1:
        var index, t1, value, key;
        if (state0 === 1 || state0 === 0 && (t1 == null || t1 === $.CONSTANT3))
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 1:
              state0 = 0;
              this._numberOfEntries = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
          }
        t1 = this._keys;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = key;
        t1 = this._values;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = value;
    }
  },
  operator$index$1: function(key) {
    var index, t1;
    index = this._probeForLookup$1(key);
    if (typeof index !== "number")
      return this.operator$index$1$bailout0(1, index);
    if (index < 0)
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout0: function(state0, index) {
    var t1;
    if ($.ltB(index, 0))
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  remove$1: function(key) {
    var index, t1, t2, value;
    index = this._probeForLookup$1(key);
    if ($.geB(index, 0)) {
      t1 = this._numberOfEntries;
      this._numberOfEntries = $.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1);
      t2 = this._values;
      if (index !== (index | 0))
        throw $.iae(index);
      if (index < 0 || index >= t2.length)
        throw $.ioore(index);
      value = t2[index];
      t2[index] = null;
      t2 = this._keys;
      if (index >= t2.length)
        throw $.ioore(index);
      t2[index] = $.CONSTANT3;
      this._numberOfDeleted = this._numberOfDeleted + 1;
      return value;
    }
    return;
  },
  get$isEmpty: function() {
    return $.eq(this._numberOfEntries, 0);
  },
  get$length: function() {
    return this._numberOfEntries;
  },
  forEach$1: function(f) {
    var it, t1, t2, t3;
    it = $._HashMapImplIndexIterator$(this);
    for (; it.moveNext$0() === true;) {
      t1 = this._keys;
      t2 = it.get$current();
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      t2 = t1[t2];
      t1 = this._values;
      t3 = it.get$current();
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      f.call$2(t2, t1[t3]);
    }
  },
  get$keys: function() {
    return $._HashMapImplKeyIterable$(this);
  },
  get$values: function() {
    return $._HashMapImplValueIterable$(this);
  },
  containsKey$1: function(key) {
    return !$.eqB(this._probeForLookup$1(key), -1);
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _HashMapImpl$0: function() {
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
    this._keys = $.List_List$fixedLength(8, null);
    this._values = $.List_List$fixedLength(8, null);
  },
  is$Map: function() {
    return true;
  }
};

$$._HashMapImplKeyIterable = {"": "Iterable;_map",
  get$iterator: function() {
    return $._HashMapImplKeyIterator$(this._map);
  }
};

$$._HashMapImplValueIterable = {"": "Iterable;_map",
  get$iterator: function() {
    return $._HashMapImplValueIterator$(this._map);
  }
};

$$._HashMapImplIterator = {"": "Object;",
  moveNext$0: function() {
    var t1, t2, length$, t3, newIndex, key;
    t1 = this._map;
    t2 = t1.get$_keys();
    length$ = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
    if (typeof length$ !== "number")
      return this.moveNext$0$bailout2(1, length$, t1);
    t3 = this._index;
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout2(2, length$, t1, t3);
    newIndex = t3 + 1;
    for (t2 = t1.get$_keys(); newIndex < length$;) {
      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout2(3, length$, t2, newIndex, t1);
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t2.length)
        throw $.ioore(newIndex);
      key = t2[newIndex];
      if (!(key == null) && !(key === $.CONSTANT3)) {
        this._liblib0$_current = this._computeCurrentFromIndex$3(newIndex, t2, t1.get$_values());
        this._index = newIndex;
        return true;
      }
      ++newIndex;
    }
    this._index = length$;
    this._liblib0$_current = null;
    return false;
  },
  moveNext$0$bailout2: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env1;
        length$ = env0;
        break;
      case 2:
        t3 = env2;
        t1 = env1;
        length$ = env0;
        break;
      case 3:
        t1 = env3;
        newIndex = env2;
        t2 = env1;
        length$ = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._map;
        t2 = t1.get$_keys();
        length$ = $.getInterceptor$JSStringJSArray(t2).get$length(t2);
      case 1:
        state0 = 0;
        t3 = this._index;
      case 2:
        state0 = 0;
        newIndex = $.getInterceptor$JSNumber(t3).operator$add$1(t3, 1);
      case 3:
        var t1, t2, length$, t3, newIndex, key;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.ltB(newIndex, length$))
                  break L0;
                t2 = t1.get$_keys();
              case 3:
                state0 = 0;
                key = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, newIndex);
                if (!(key == null) && !(key === $.CONSTANT3)) {
                  this._liblib0$_current = this._computeCurrentFromIndex$3(newIndex, t1.get$_keys(), t1.get$_values());
                  this._index = newIndex;
                  return true;
                }
                newIndex = $.getInterceptor$JSNumber(newIndex).operator$add$1(newIndex, 1);
            }
        this._index = length$;
        this._liblib0$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib0$_current;
  }
};

$$._HashMapImplKeyIterator = {"": "_HashMapImplIterator;_map,_index,_liblib0$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return $.getInterceptor$JSStringJSArray(keys).operator$index$1(keys, index);
  }
};

$$._HashMapImplValueIterator = {"": "_HashMapImplIterator;_map,_index,_liblib0$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return $.getInterceptor$JSStringJSArray(values).operator$index$1(values, index);
  }
};

$$._HashMapImplIndexIterator = {"": "_HashMapImplIterator;_map,_index,_liblib0$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return index;
  }
};

$$._DeletedKeySentinel = {"": "Object;"};

$$._KeyValuePair = {"": "Object;key>,value="};

$$._LinkedHashMapImpl = {"": "Object;_liblib0$_list,_map",
  operator$indexSet$2: function(key, value) {
    var t1, t3;
    if (this._map.containsKey$1(key) === true) {
      t1 = this._map;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.operator$indexSet$2$bailout0(1, key, value, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key].get$element().set$value(value);
    } else {
      this._liblib0$_list.addLast$1($._KeyValuePair$(key, value));
      t1 = this._map;
      if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
        return this.operator$indexSet$2$bailout0(2, t1, key);
      t3 = this._liblib0$_list.lastEntry$0();
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key] = t3;
    }
  },
  operator$indexSet$2$bailout0: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        t1 = env2;
        value = env1;
        key = env0;
        break;
      case 2:
        key = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
      default:
        var t1, value, key, t3;
        if (state0 === 1 || state0 === 0 && this._map.containsKey$1(key) === true)
          switch (state0) {
            case 0:
              t1 = this._map;
            case 1:
              state0 = 0;
              $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, key).get$element().set$value(value);
          }
        else
          switch (state0) {
            case 0:
              this._liblib0$_list.addLast$1($._KeyValuePair$(key, value));
              t1 = this._map;
            case 2:
              state0 = 0;
              t3 = this._liblib0$_list.lastEntry$0();
              $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, key, t3);
          }
    }
  },
  operator$index$1: function(key) {
    var t1, entry;
    t1 = this._map;
    entry = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, key);
    if (entry == null)
      return;
    return entry.get$element().get$value();
  },
  remove$1: function(key) {
    var t1, entry;
    t1 = this._map;
    entry = $.getInterceptor$JSArray(t1).remove$1(t1, key);
    if (entry == null)
      return;
    entry.remove$0();
    return entry.get$element().get$value();
  },
  get$keys: function() {
    return $.MappedIterable$(this._liblib0$_list, new $._LinkedHashMapImpl_keys_anon());
  },
  get$values: function() {
    return $.MappedIterable$(this._liblib0$_list, new $._LinkedHashMapImpl_values_anon());
  },
  forEach$1: function(f) {
    this._liblib0$_list.forEach$1(new $._LinkedHashMapImpl_forEach_anon(f));
  },
  containsKey$1: function(key) {
    return this._map.containsKey$1(key);
  },
  get$length: function() {
    var t1 = this._map;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  clear$0: function() {
    var t1 = this._map;
    $.getInterceptor$JSArray(t1).clear$0(t1);
    this._liblib0$_list.clear$0();
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _LinkedHashMapImpl$0: function() {
    this._map = $.HashMap_HashMap();
    this._liblib0$_list = $.DoubleLinkedQueue$();
  },
  is$Map: function() {
    return true;
  }
};

$$.Object = {"": ";",
  operator$eq$1: function(other) {
    return this === other;
  },
  get$hashCode: function() {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function() {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  }
};

$$.DoubleLinkedQueueEntry = {"": "Object;_previous=,_next=,_liblib0$_element",
  _link$2: function(p, n) {
    this._next = n;
    this._previous = p;
    p.set$_next(this);
    n.set$_previous(this);
  },
  prepend$1: function(e) {
    $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
  },
  remove$0: function() {
    var t1 = this._next;
    this._previous.set$_next(t1);
    t1 = this._previous;
    this._next.set$_previous(t1);
    this._next = null;
    this._previous = null;
    return this._liblib0$_element;
  },
  _asNonSentinelEntry$0: function() {
    return this;
  },
  previousEntry$0: function() {
    return this._previous._asNonSentinelEntry$0();
  },
  nextEntry$0: function() {
    return this._next._asNonSentinelEntry$0();
  },
  get$element: function() {
    return this._liblib0$_element;
  },
  DoubleLinkedQueueEntry$1: function(e) {
    this._liblib0$_element = e;
  }
};

$$._DoubleLinkedQueueEntrySentinel = {"": "DoubleLinkedQueueEntry;_previous,_next,_liblib0$_element",
  remove$0: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _asNonSentinelEntry$0: function() {
    return;
  },
  get$element: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _DoubleLinkedQueueEntrySentinel$0: function() {
    this._link$2(this, this);
  }
};

$$.DoubleLinkedQueue = {"": "Iterable;_sentinel",
  addLast$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  add$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  removeLast$0: function() {
    return this._sentinel._previous.remove$0();
  },
  removeFirst$0: function() {
    return this._sentinel._next.remove$0();
  },
  remove$1: function(o) {
    var entry = this._sentinel.nextEntry$0();
    for (; !(entry === this._sentinel);) {
      if ($.eqB(entry.get$element(), o)) {
        entry.remove$0();
        return;
      }
      entry = entry.get$_next();
    }
  },
  get$last: function() {
    return this._sentinel._previous.get$element();
  },
  lastEntry$0: function() {
    return this._sentinel.previousEntry$0();
  },
  get$isEmpty: function() {
    var t1 = this._sentinel;
    return t1._next === t1;
  },
  clear$0: function() {
    var t1 = this._sentinel;
    t1._next = t1;
    t1 = this._sentinel;
    t1._previous = t1;
  },
  get$iterator: function() {
    return $._DoubleLinkedQueueIterator$(this._sentinel);
  },
  toString$0: function() {
    return $.Collections_collectionToString(this);
  },
  DoubleLinkedQueue$0: function() {
    this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
  },
  is$Collection: function() {
    return true;
  }
};

$$._DoubleLinkedQueueIterator = {"": "Object;_sentinel,_currentEntry,_liblib0$_current",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._currentEntry;
    if (t1 == null)
      return false;
    this._currentEntry = t1.get$_next();
    t1 = this._currentEntry;
    t2 = this._sentinel;
    if (t1 == null ? t2 == null : t1 === t2) {
      this._currentEntry = null;
      this._liblib0$_current = null;
      this._sentinel = null;
      return false;
    }
    this._liblib0$_current = t1.get$element();
    return true;
  },
  get$current: function() {
    return this._liblib0$_current;
  }
};

$$.HashSet = {"": "Collection;_backingMap",
  clear$0: function() {
    this._backingMap.clear$0();
  },
  add$1: function(value) {
    this._backingMap.operator$indexSet$2(value, value);
  },
  remove$1: function(value) {
    var t1 = this._backingMap;
    if (t1.containsKey$1(value) !== true)
      return false;
    t1.remove$1(value);
    return true;
  },
  forEach$1: function(f) {
    this._backingMap.forEach$1(new $.HashSet_forEach_anon(f));
  },
  get$isEmpty: function() {
    var t1 = this._backingMap;
    return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
  },
  get$length: function() {
    var t1 = this._backingMap;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  get$iterator: function() {
    return $._HashSetIterator$(this);
  },
  toString$0: function() {
    return $.Collections_collectionToString(this);
  },
  is$Collection: function() {
    return true;
  }
};

$$._HashSetIterator = {"": "Object;_keysIterator",
  get$current: function() {
    var result = this._keysIterator.get$current();
    if (result === $.CONSTANT3)
      throw $.$$throw($.StateError$("Concurrent modification."));
    return result;
  },
  moveNext$0: function() {
    var t1, result, t2;
    t1 = this._keysIterator;
    do {
      result = t1.moveNext$0();
      if (result === true)
        t2 = t1.get$current() == null || t1.get$current() === $.CONSTANT3;
      else
        t2 = false;
    } while (t2);
    return result;
  }
};

$$._StringBufferImpl = {"": "Object;_buffer,_liblib0$_length",
  get$length: function() {
    return this._liblib0$_length;
  },
  get$isEmpty: function() {
    return $.eq(this._liblib0$_length, 0);
  },
  add$1: function(obj) {
    var str, t1;
    str = $.getInterceptor(obj).toString$0(obj);
    if (!(typeof str === "string"))
      throw $.$$throw($.ArgumentError$("toString() did not return a string"));
    if ($.CONSTANT1.get$isEmpty(str) === true)
      return;
    t1 = this._buffer;
    $.getInterceptor$JSArray(t1).add$1(t1, str);
    t1 = this._liblib0$_length;
    if (typeof t1 !== "number")
      return this.add$1$bailout(1, t1, str);
    this._liblib0$_length = t1 + str.length;
  },
  add$1$bailout: function(state0, t1, str) {
    var t3 = str.length;
    this._liblib0$_length = $.getInterceptor$JSNumber(t1).operator$add$1(t1, t3);
  },
  clear$0: function() {
    this._buffer = $.List_List(0);
    this._liblib0$_length = 0;
  },
  toString$0: function() {
    var t1, result;
    t1 = this._buffer;
    if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 0))
      return "";
    t1 = this._buffer;
    if ($.eqB($.getInterceptor$JSStringJSArray(t1).get$length(t1), 1)) {
      t1 = this._buffer;
      return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0);
    }
    result = $.Strings__toJsStringArray(this._buffer).join("");
    t1 = this._buffer;
    $.getInterceptor$JSArray(t1).clear$0(t1);
    t1 = this._buffer;
    $.getInterceptor$JSArray(t1).add$1(t1, result);
    return result;
  },
  _StringBufferImpl$1: function(content$) {
    this.clear$0();
    this.add$1(content$);
  }
};

$$.MappedIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function() {
    var t1 = this._iterable;
    return $.MappedIterator$($.getInterceptor$JSArray(t1).get$iterator(t1), this._f);
  },
  get$length: function() {
    var t1 = this._iterable;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  get$isEmpty: function() {
    var t1 = this._iterable;
    return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
  }
};

$$.MappedIterator = {"": "Iterator;_liblib1$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib1$_current = this._f$1(t1.get$current());
      return true;
    } else {
      this._liblib1$_current = null;
      return false;
    }
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$.WhereIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function() {
    var t1 = this._iterable;
    return $.WhereIterator$($.getInterceptor$JSArray(t1).get$iterator(t1), this._f);
  }
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
};

$$.NonExtensibleListMixin = {"": "Iterable;",
  get$iterator: function() {
    return $.ListIterator$(this);
  },
  forEach$1: function(f) {
    var t1, i;
    for (t1 = $.getInterceptor$JSStringJSArray(this), i = 0; $.ltB(i, t1.get$length(this)); ++i)
      f.call$1(this.operator$index$1(i));
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  indexOf$2: function(value, start) {
    var t1, i;
    if (typeof start !== "number")
      return this.indexOf$2$bailout(1, value, start);
    for (t1 = $.getInterceptor$JSStringJSArray(this), i = start; $.ltB(i, t1.get$length(this)); ++i)
      if ($.eqB(this.operator$index$1(i), value))
        return i;
    return -1;
  },
  indexOf$2$bailout: function(state0, value, start) {
    var t1, i;
    for (t1 = $.getInterceptor$JSStringJSArray(this), i = start; $.ltB(i, t1.get$length(this)); i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1))
      if ($.eqB(this.operator$index$1(i), value))
        return i;
    return -1;
  },
  indexOf$1: function(value) {
    return this.indexOf$2(value, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  set$length: function(newLength) {
    throw $.$$throw($.UnsupportedError$("Cannot change the length of an unmodifiable list"));
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  remove$1: function(element) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear an unmodifiable list"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$.ListIterator = {"": "Object;_liblib1$_list,_liblib1$_position,_liblib1$_current",
  moveNext$0: function() {
    var t1, nextPosition, t2, t3;
    t1 = this._liblib1$_position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout1(1, t1);
    nextPosition = t1 + 1;
    t1 = this._liblib1$_list;
    t2 = $.getInterceptor$JSStringJSArray(t1);
    t3 = t2.get$length(t1);
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout1(2, t1, t2, t3, nextPosition);
    if (nextPosition < t3) {
      this._liblib1$_current = t1.operator$index$1(nextPosition);
      this._liblib1$_position = nextPosition;
      return true;
    }
    this._liblib1$_position = t2.get$length(t1);
    this._liblib1$_current = null;
    return false;
  },
  moveNext$0$bailout1: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env0;
        break;
      case 2:
        nextPosition = env3;
        t3 = env2;
        t2 = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._liblib1$_position;
      case 1:
        state0 = 0;
        nextPosition = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
        t1 = this._liblib1$_list;
        t2 = $.getInterceptor$JSStringJSArray(t1);
        t3 = t2.get$length(t1);
      case 2:
        var t1, nextPosition, t2, t3;
        state0 = 0;
        if ($.ltB(nextPosition, t3)) {
          this._liblib1$_current = t1.operator$index$1(nextPosition);
          this._liblib1$_position = nextPosition;
          return true;
        }
        this._liblib1$_position = t2.get$length(t1);
        this._liblib1$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$.ListView = {"": "NonExtensibleListMixin;_liblib1$_list,_offset,_liblib1$_length",
  get$length: function() {
    var t1, originalLength, skipLength;
    t1 = this._liblib1$_list;
    originalLength = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    t1 = this._offset;
    skipLength = $.getInterceptor$JSNumber(originalLength).operator$sub$1(originalLength, t1);
    if ($.ltB(skipLength, 0))
      return 0;
    t1 = this._liblib1$_length;
    if (t1 == null || $.gtB(t1, skipLength))
      return skipLength;
    return t1;
  },
  operator$index$1: function(index) {
    var t1, t2, t3, t4;
    t1 = this._offset;
    t2 = $.getInterceptor$JSNumber(index);
    t2.operator$add$1(index, t1);
    if (!$.ltB(index, 0)) {
      t3 = this._liblib1$_length;
      if (!(!(t3 == null) && $.geB(index, t3))) {
        t3 = t2.operator$add$1(index, t1);
        t4 = this._liblib1$_list;
        t3 = $.geB(t3, $.getInterceptor$JSStringJSArray(t4).get$length(t4));
      } else
        t3 = true;
    } else
      t3 = true;
    if (t3)
      throw $.$$throw($.RangeError$value(index));
    t3 = this._liblib1$_list;
    t1 = t2.operator$add$1(index, t1);
    return $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, t1);
  },
  ListView$3: function(list, _offset, _length) {
    var t1, t2;
    t1 = this._offset;
    if (t1 < 0)
      throw $.$$throw($.ArgumentError$(t1));
    t1 = this._liblib1$_length;
    if (!(t1 == null))
      t2 = !(typeof t1 === "number" && Math.floor(t1) === t1) || $.ltB(t1, 0);
    else
      t2 = false;
    if (t2)
      throw $.$$throw($.ArgumentError$(t1));
  }
};

$$.ObjectInterceptor = {"": "Object;",
  toString$0: function(receiver) {
    return receiver.toString$0();
  },
  operator$index$1: function(receiver, a0) {
    return receiver.operator$index$1(a0);
  },
  operator$indexSet$2: function(receiver, a0, a1) {
    return receiver.operator$indexSet$2(a0, a1);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase$0();
  },
  charCodeAt$1: function(receiver, a0) {
    return receiver.charCodeAt$1(a0);
  },
  replaceAll$2: function(receiver, a0, a1) {
    return receiver.replaceAll$2(a0, a1);
  },
  get$length: function(receiver) {
    return receiver.get$length();
  },
  substring$1: function(receiver, a0) {
    return receiver.substring$1(a0);
  },
  abs$0: function(receiver) {
    return receiver.abs$0();
  },
  operator$mul$1: function(receiver, a0) {
    return receiver.operator$mul$1(a0);
  },
  get$iterator: function(receiver) {
    return receiver.get$iterator();
  },
  operator$add$1: function(receiver, a0) {
    return receiver.operator$add$1(a0);
  },
  truncate$0: function(receiver) {
    return receiver.truncate$0();
  },
  toList$0: function(receiver) {
    return receiver.toList$0();
  },
  operator$and$1: function(receiver, a0) {
    return receiver.operator$and$1(a0);
  },
  operator$mod$1: function(receiver, a0) {
    return receiver.operator$mod$1(a0);
  },
  clear$0: function(receiver) {
    return receiver.clear$0();
  },
  add$1: function(receiver, a0) {
    return receiver.add$1(a0);
  },
  operator$xor$1: function(receiver, a0) {
    return receiver.operator$xor$1(a0);
  },
  trim$0: function(receiver) {
    return receiver.trim$0();
  },
  operator$tdiv$1: function(receiver, a0) {
    return receiver.operator$tdiv$1(a0);
  },
  ceil$0: function(receiver) {
    return receiver.ceil$0();
  },
  get$isEmpty: function(receiver) {
    return receiver.get$isEmpty();
  },
  endsWith$1: function(receiver, a0) {
    return receiver.endsWith$1(a0);
  },
  operator$or$1: function(receiver, a0) {
    return receiver.operator$or$1(a0);
  },
  get$last: function(receiver) {
    return receiver.get$last();
  },
  set$length: function(receiver, value) {
    return receiver.set$length(value);
  },
  indexOf$1: function(receiver, a0) {
    return receiver.indexOf$1(a0);
  },
  floor$0: function(receiver) {
    return receiver.floor$0();
  },
  addLast$1: function(receiver, a0) {
    return receiver.addLast$1(a0);
  },
  operator$negate$0: function(receiver) {
    return receiver.operator$negate$0();
  },
  join$1: function(receiver, a0) {
    return receiver.join$1(a0);
  },
  get$hashCode: function(receiver) {
    return receiver.get$hashCode();
  },
  where$1: function(receiver, a0) {
    return receiver.where$1(a0);
  },
  removeLast$0: function(receiver) {
    return receiver.removeLast$0();
  },
  forEach$1: function(receiver, a0) {
    return receiver.forEach$1(a0);
  },
  operator$sub$1: function(receiver, a0) {
    return receiver.operator$sub$1(a0);
  },
  operator$shl$1: function(receiver, a0) {
    return receiver.operator$shl$1(a0);
  },
  remove$1: function(receiver, a0) {
    return receiver.remove$1(a0);
  },
  split$1: function(receiver, a0) {
    return receiver.split$1(a0);
  }
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  }
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  is$bool: true
};

$$.JSNull = {"": "Object;",
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    $.checkGrowable(receiver, "remove");
    for (i = 0; i < receiver.length; ++i)
      if ($.eqB(receiver[i], element)) {
        receiver.splice(i, 1);
        return;
      }
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  addLast$1: function(receiver, value) {
    $.checkGrowable(receiver, "addLast");
    receiver.push(value);
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(receiver, separator) {
    var list, i, t1;
    if (separator == null)
      separator = "";
    list = $.List_List(receiver.length);
    for (i = 0; i < receiver.length; ++i) {
      t1 = $.S(receiver[i]);
      if (i >= list.length)
        throw $.ioore(i);
      list[i] = t1;
    }
    return list.join(separator);
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.$$throw($.StateError$("No elements"));
  },
  indexOf$2: function(receiver, element, start) {
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.Collections_collectionToString(receiver);
  },
  toList$0: function(receiver) {
    return $.List_List$from(receiver);
  },
  get$iterator: function(receiver) {
    return $._ArrayIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  operator$index$1: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  operator$indexSet$2: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$._ArrayIterator = {"": "Object;_list,_liblib$_position,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, nextPosition, length$;
    t1 = this._liblib$_position;
    if (t1 !== (t1 | 0))
      return this.moveNext$0$bailout0(1, t1);
    nextPosition = t1 + 1;
    t1 = this._list;
    length$ = t1.length;
    if (nextPosition < length$) {
      this._liblib$_position = nextPosition;
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib$_current = t1[nextPosition];
      return true;
    }
    this._liblib$_position = length$;
    this._liblib$_current = null;
    return false;
  },
  moveNext$0$bailout0: function(state0, t1) {
    var nextPosition, length$;
    nextPosition = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
    t1 = this._list;
    length$ = t1.length;
    if ($.ltB(nextPosition, length$)) {
      this._liblib$_position = nextPosition;
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib$_current = t1[nextPosition];
      return true;
    }
    this._liblib$_position = length$;
    this._liblib$_current = null;
    return false;
  }
};

$$.JSNumber = {"": "Object;",
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  ceil$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floor$0: function(receiver) {
    return Math.floor(receiver);
  },
  truncate$0: function(receiver) {
    return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  operator$negate$0: function(receiver) {
    return -receiver;
  },
  operator$add$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  operator$sub$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  operator$mul$1: function(receiver, other) {
    return receiver * other;
  },
  operator$mod$1: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  operator$tdiv$1: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  operator$shl$1: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return (receiver << other) >>> 0;
  },
  operator$and$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  operator$or$1: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  operator$xor$1: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver ^ other) >>> 0;
  }
};

$$.JSInt = {"": "JSNumber;"};

$$.JSDouble = {"": "JSNumber;"};

$$.JSString = {"": "Object;",
  charCodeAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    $.checkNull(pattern);
    return receiver.split(pattern);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    if ($.ltB(startIndex, 0))
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.gtB(startIndex, endIndex))
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.gtB(endIndex, receiver.length))
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  trim$0: function(receiver) {
    return receiver.trim();
  },
  indexOf$2: function(receiver, other, start) {
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  indexOf$1: function($receiver, other) {
    return this.indexOf$2($receiver, other, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  operator$index$1: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  is$String: true
};

$$._Manager = {"": "Object;nextIsolateId=,currentManagerId=,nextManagerId=,currentContext=,rootContext=,topEventLoop>,fromCommandLine>,isWorker>,supportsWorkers,isolates>,mainManager>,managers>",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, isWorkerDefined, t2;
    t1 = $.get$globalWindow() == null;
    isWorkerDefined = !($.get$globalWorker() == null);
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = isWorkerDefined && !($.get$IsolateNatives_thisScript() == null);
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var function$ = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = function$;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true) {
      var t1 = this.isolates;
      t1 = $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true && $.eqB(this.topEventLoop.get$activeTimerCount(), 0);
    } else
      t1 = false;
    if (t1)
      this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "close"])));
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map();
    this.managers = $.Map_Map();
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id=,ports>,isolateStatics",
  eval$1: function(code) {
    var old, result, t1;
    old = $globalState.get$currentContext();
    $globalState.set$currentContext(this);
    this._setGlobals$0();
    result = null;
    try {
      result = code.call$0();
    } finally {
      t1 = old;
      $globalState.set$currentContext(t1);
      if (!(old == null))
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, portId);
  },
  register$2: function(portId, port) {
    var t1, t2;
    if (this.ports.containsKey$1(portId) === true)
      throw $.$$throw($.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, portId, port);
    t1 = $globalState.get$isolates();
    t2 = this.id;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, t2, this);
  },
  unregister$1: function(portId) {
    var t1, t2;
    t1 = this.ports;
    $.getInterceptor$JSArray(t1).remove$1(t1, portId);
    t1 = this.ports;
    if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true) {
      t1 = $globalState.get$isolates();
      t2 = this.id;
      $.getInterceptor$JSArray(t1).remove$1(t1, t2);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId($.getInterceptor$JSNumber(t2).operator$add$1(t2, 1));
    this.id = t2;
    this.ports = $.Map_Map();
    this.isolateStatics = new Isolate;
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount=",
  enqueue$3: function(isolate, fn, msg) {
    var t1, t2;
    t1 = this.events;
    t2 = $._IsolateEvent$(isolate, fn, msg);
    $.getInterceptor$JSArray(t1).addLast$1(t1, t2);
  },
  dequeue$0: function() {
    var t1 = this.events;
    if ($.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    var t1, t2;
    if (!($globalState.get$rootContext() == null))
      if ($globalState.get$isolates().containsKey$1($globalState.get$rootContext().get$id()) === true)
        if ($globalState.get$fromCommandLine() === true) {
          t1 = $globalState.get$rootContext().get$ports();
          t2 = $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1) === true;
          t1 = t2;
        } else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    if (t1)
      throw $.$$throw($.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var event$ = this.dequeue$0();
    if (event$ == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    event$.process$0();
    return true;
  },
  _runHelper$0: function() {
    if (!($.get$globalWindow() == null))
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0() === true;)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.get$isWorker() !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $globalState.get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;",
  get$id: function() {
    return 0;
  },
  set$id: function(i) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  set$onmessage: function(f) {
    throw $.$$throw($.Exception_Exception("onmessage should not be set on MainManagerStub"));
  },
  postMessage$1: function(msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function() {
  }
};

$$._BaseSendPort = {"": "Object;_isolateId>",
  _checkReplyTo$1: function(replyTo) {
    if (!(replyTo == null) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.is$_BufferingSendPort))
      throw $.$$throw($.Exception_Exception("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $.Completer_Completer();
    port = $.ReceivePortImpl$();
    this.send$2(message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.get$future();
  },
  is$SendPort: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort>,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  operator$eq$1: function(other) {
    return typeof other === "object" && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._receivePort, other._receivePort);
  },
  get$hashCode: function() {
    return this._receivePort.get$_id();
  },
  is$_NativeJsSendPort: true,
  is$SendPort: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId>,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  operator$eq$1: function(other) {
    var t1;
    if (typeof other === "object" && other !== null && !!other.is$_WorkerSendPort)
      t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._isolateId, other._isolateId) && $.eqB(this._receivePortId, other._receivePortId);
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function() {
    var t1, t2;
    t1 = this._workerId;
    t1 = $.getInterceptor$JSNumber(t1).operator$shl$1(t1, 16);
    t2 = this._isolateId;
    t2 = $.getInterceptor$JSNumber(t2).operator$shl$1(t2, 8);
    t2 = $.getInterceptor$JSNumber(t1).operator$xor$1(t1, t2);
    t1 = this._receivePortId;
    return $.getInterceptor$JSNumber(t2).operator$xor$1(t2, t1);
  },
  is$_WorkerSendPort: true,
  is$SendPort: true
};

$$.ReceivePortImpl = {"": "Object;_id>,_callback>",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._callback = onMessage;
  },
  close$0: function() {
    this._callback = null;
    $globalState.get$currentContext().unregister$1(this._id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $globalState.get$currentContext().get$id());
  },
  ReceivePortImpl$0: function() {
    $._globalState().get$currentContext().register$2(this._id, this);
  }
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports>,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (!($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list) == null))
      return;
    t1 = this._visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, list, true);
    t1 = new $._PendingSendPortFinder_visitList_anon(this);
    $.getInterceptor$JSArray(list).forEach$1(list, t1);
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = this._visited;
    if (!($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, map) == null))
      return;
    t1 = this._visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, map, true);
    t1 = map.get$values();
    t2 = new $._PendingSendPortFinder_visitMap_anon(this);
    $.getInterceptor$JSArray(t1).forEach$1(t1, t2);
  },
  visitSendPort$1: function(port) {
    if (!!port.is$_BufferingSendPort && port._port == null)
      this.ports.push(port.get$_futurePort());
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.is$_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.is$_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    if (typeof x === "object" && x !== null && !!x.is$_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $globalState.get$currentManagerId(), port._isolateId, port._receivePort.get$_id()];
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._port;
    if (!(t1 == null))
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.is$_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.is$_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.is$_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._receivePort, port._isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._port;
    if (!(t1 == null))
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(x) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$JSStringJSArray(x);
    managerId = t1.operator$index$1(x, 1);
    isolateId = t1.operator$index$1(x, 2);
    receivePortId = t1.operator$index$1(x, 3);
    if ($.eqB(managerId, $globalState.get$currentManagerId())) {
      t1 = $globalState.get$isolates();
      isolate = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  operator$index$1: function(object) {
    return object['__MessageTraverser__attached_info__'];
  },
  operator$indexSet$2: function(object, info) {
    var t1 = this.tagged;
    $.getInterceptor$JSArray(t1).add$1(t1, object);
    object['__MessageTraverser__attached_info__'] = info;
  },
  reset$0: function() {
    this.tagged = $.List_List(0);
  },
  cleanup$0: function() {
    var t1, length$, i;
    t1 = this.tagged;
    length$ = $.getInterceptor$JSStringJSArray(t1).get$length(t1);
    if (typeof length$ !== "number")
      return this.cleanup$0$bailout(1, length$);
    i = 0;
    for (; i < length$; ++i) {
      t1 = this.tagged;
      $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i)['__MessageTraverser__attached_info__'] = null;
    }
    this.tagged = null;
  },
  cleanup$0$bailout: function(state0, length$) {
    var i, t1;
    i = 0;
    for (; $.ltB(i, length$); ++i) {
      t1 = this.tagged;
      $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i)['__MessageTraverser__attached_info__'] = null;
    }
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  operator$index$1: function(object) {
    return;
  },
  operator$indexSet$2: function(object, info) {
  },
  reset$0: function() {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    this._visited.reset$0();
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.is$List()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && x.is$Map())
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.is$SendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.is$SendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i;
    if (typeof list !== "object" || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
      return this.visitList$1$bailout(1, list);
    t1 = this._visited;
    copy = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list);
    if (!(copy == null))
      return copy;
    len = list.length;
    copy = $.List_List(len);
    t1 = this._visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, list, copy);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._dispatch$1(list[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  },
  visitList$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        list = env0;
        break;
      case 2:
        len = env2;
        list = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._visited;
        copy = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list);
        if (!(copy == null))
          return copy;
        t1 = $.getInterceptor$JSStringJSArray(list);
        len = t1.get$length(list);
      case 2:
        var list, t1, copy, len, t3, i, t2;
        state0 = 0;
        copy = $.List_List(len);
        t3 = this._visited;
        $.getInterceptor$JSArray(t3).operator$indexSet$2(t3, list, copy);
        for (i = 0; $.ltB(i, len); ++i) {
          t2 = this._dispatch$1(t1.operator$index$1(list, i));
          if (i >= copy.length)
            throw $.ioore(i);
          copy[i] = t2;
        }
        return copy;
    }
  },
  visitMap$1: function(map) {
    var t1, t2, t3;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, map);
    t2 = t1.copy_0;
    if (!(t2 == null))
      return t2;
    t1.copy_0 = $.Map_Map();
    t2 = this._visited;
    t3 = t1.copy_0;
    $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, map, t3);
    map.forEach$1(new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, list);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id, keys, t2;
    t1 = this._visited;
    copyId = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, map);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, map, id);
    t1 = map.get$keys();
    keys = this._serializeList$1($.getInterceptor$JSArray(t1).toList$0(t1));
    t2 = map.get$values();
    return ["map", id, keys, this._serializeList$1($.getInterceptor$JSArray(t2).toList$0(t2))];
  },
  _serializeList$1: function(list) {
    var len, result, i, t1;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._dispatch$1(list[i]);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        list = env0;
        break;
      case 2:
        len = env2;
        t1 = env1;
        list = env0;
        break;
    }
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSStringJSArray(list);
        len = t1.get$length(list);
      case 2:
        var list, t1, len, result, i, t2;
        state0 = 0;
        result = $.List_List(len);
        for (i = 0; $.ltB(i, len); ++i) {
          t2 = this._dispatch$1(t1.operator$index$1(list, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap_HashMap();
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch ($.getInterceptor$JSStringJSArray(x).operator$index$1(x, 0)) {
      case "ref":
        return this._deserializeRef$1(x);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeRef$1: function(x) {
    var id, t1;
    id = $.getInterceptor$JSStringJSArray(x).operator$index$1(x, 1);
    t1 = this._deserialized;
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, id);
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, t2, len, i;
    t1 = $.getInterceptor$JSStringJSArray(x);
    id = t1.operator$index$1(x, 1);
    dartList = t1.operator$index$1(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
      return this._deserializeList$1$bailout(1, dartList, id);
    t2 = this._deserialized;
    $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, env0, env1, env2) {
    switch (state0) {
      case 1:
        id = env1;
        dartList = env0;
        break;
      case 2:
        len = env2;
        t2 = env1;
        dartList = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSStringJSArray(x);
        id = t1.operator$index$1(x, 1);
        dartList = t1.operator$index$1(x, 2);
      case 1:
        state0 = 0;
        t2 = this._deserialized;
        $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, dartList);
        t2 = $.getInterceptor$JSStringJSArray(dartList);
        len = t2.get$length(dartList);
      case 2:
        var t1, id, dartList, t2, len, i;
        state0 = 0;
        for (i = 0; $.ltB(i, len); ++i)
          t2.operator$indexSet$2(dartList, i, this._deserializeHelper$1(t2.operator$index$1(dartList, i)));
        return dartList;
    }
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.Map_Map();
    t1 = $.getInterceptor$JSStringJSArray(x);
    id = t1.operator$index$1(x, 1);
    t2 = this._deserialized;
    $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, result);
    keys = t1.operator$index$1(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.operator$index$1(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(2, values, result, keys);
    len = keys.length;
    for (t1 = $.getInterceptor$JSArray(result), i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      t1.operator$indexSet$2(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, env0, env1, env2, env3, env4) {
    switch (state0) {
      case 1:
        t1 = env3;
        keys = env2;
        result = env1;
        x = env0;
        break;
      case 2:
        keys = env2;
        result = env1;
        values = env0;
        break;
      case 3:
        keys = env4;
        result = env3;
        len = env2;
        t3 = env1;
        values = env0;
        break;
    }
    switch (state0) {
      case 0:
        result = $.Map_Map();
        t1 = $.getInterceptor$JSStringJSArray(x);
        id = t1.operator$index$1(x, 1);
        t2 = this._deserialized;
        $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, id, result);
        keys = t1.operator$index$1(x, 2);
      case 1:
        state0 = 0;
        values = t1.operator$index$1(x, 3);
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(keys);
        len = t3.get$length(keys);
      case 3:
        var result, t1, id, t2, keys, x, values, t3, len, i;
        state0 = 0;
        for (t1 = $.getInterceptor$JSStringJSArray(values), t2 = $.getInterceptor$JSArray(result), i = 0; $.ltB(i, len); ++i)
          t2.operator$indexSet$2(result, this._deserializeHelper$1(t3.operator$index$1(keys, i)), this._deserializeHelper$1(t1.operator$index$1(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle<",
  cancel$0: function() {
    var t1, t2;
    if (!($.get$globalThis().setTimeout == null)) {
      if (this._inEventLoop === true)
        throw $.$$throw($.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      t1 = $globalState.get$topEventLoop();
      t2 = t1.get$activeTimerCount();
      t1.set$activeTimerCount($.getInterceptor$JSNumber(t2).operator$sub$1(t2, 1));
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw $.$$throw($.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if ($.eqB(milliseconds, 0))
      t1 = !$.hasTimer() || $._globalState().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), new $.anon2(this, callback), "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer()) {
      t1 = $._globalState().get$topEventLoop();
      t2 = t1.get$activeTimerCount();
      t1.set$activeTimerCount($.getInterceptor$JSNumber(t2).operator$add$1(t2, 1));
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.AsyncError = {"": "Object;error>,stackTrace>,cause>",
  _writeOn$1: function(buffer) {
    var message, t1, t2, exception;
    t1 = $.getInterceptor$JSArray(buffer);
    t1.add$1(buffer, "'");
    message = null;
    try {
      t2 = this.error;
      message = $.getInterceptor(t2).toString$0(t2);
    } catch (exception) {
      $.unwrapException(exception);
      message = $.Error_safeToString(this.error);
    }

    t1.add$1(buffer, message);
    t1.add$1(buffer, "'\n");
    t2 = this.stackTrace;
    if (!(t2 == null)) {
      t1.add$1(buffer, "Stack trace:\n");
      t1.add$1(buffer, $.getInterceptor(t2).toString$0(t2));
      t1.add$1(buffer, "\n");
    }
  },
  toString$0: function() {
    var buffer, t1, cause;
    buffer = $.StringBuffer_StringBuffer("");
    t1 = $.getInterceptor$JSArray(buffer);
    t1.add$1(buffer, "AsyncError: ");
    this._writeOn$1(buffer);
    cause = this.cause;
    for (; !(cause == null);) {
      t1.add$1(buffer, "Caused by: ");
      cause._writeOn$1(buffer);
      cause = cause.get$cause();
    }
    return t1.toString$0(buffer);
  },
  is$AsyncError: true
};

$$._CompleterImpl = {"": "Object;future>,_isComplete>",
  complete$1: function(value) {
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._setValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    var asyncError;
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    asyncError = typeof error === "object" && error !== null && !!error.is$AsyncError ? error : $.AsyncError$(error, stackTrace);
    this.future._setError$1(asyncError);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object;future>,_nextListener=",
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state,_resultOrListeners>",
  get$_isComplete: function() {
    return !$.eqB(this._state, 0);
  },
  get$_hasValue: function() {
    return $.eq(this._state, 1);
  },
  get$_hasError: function() {
    var t1 = this._state;
    return !$.eqB($.getInterceptor$JSNumber(t1).operator$and$1(t1, 2), 0);
  },
  get$_hasUnhandledError: function() {
    var t1 = this._state;
    return !$.eqB($.getInterceptor$JSNumber(t1).operator$and$1(t1, 4), 0);
  },
  _clearUnhandledError$0: function() {
    var t1 = this._state;
    this._state = $.getInterceptor$JSNumber(t1).operator$and$1(t1, 4294967291);
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (this.get$_isComplete() !== true) {
      if (onError == null) {
        t1 = $._ThenFuture$(f);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError() === true) {
      if (!(onError == null))
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue() === true)
      return $._FutureWrapper$(this);
    if (this.get$_isComplete() !== true) {
      t1 = $._CatchErrorFuture$(f, test);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue);
    $.Timer_Timer(0, new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._clearUnhandledError$0();
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test);
    $.Timer_Timer(0, new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; !(listeners == null); listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (!(listeners0 == null)) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    var t1 = this._state;
    this._state = $.getInterceptor$JSNumber(t1).operator$or$1(t1, 4);
    $.Timer_Timer(0, new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener.set$_nextListener(this._resultOrListeners);
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; !(current == null); prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (this.get$_isComplete() !== true)
      this._addListener$1(future._asListener$0());
    else if (this.get$_hasValue() === true)
      future._setValue$1(this._resultOrListeners);
    else {
      this._clearUnhandledError$0();
      future._setError$1(this._resultOrListeners);
    }
  },
  _asListener$0: function() {
    return $._FutureListener__FutureListener$wrap(this);
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  is$_FutureImpl: true,
  is$Future: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener=",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!result.is$Future)
      if (!!result.is$_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else
      this._setValue$1(result);
  }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.is$AsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, e1, s0, exception, t1;
    if (!(this._test == null)) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error.get$error());
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e, s, error));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.is$AsyncError) {
        e0 = t1;
        this._setError$1(e0);
        return;
      } else {
        e1 = t1;
        s0 = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e1, s0, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  }
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.is$AsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e0, s, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  }
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function(function$, onError) {
    return this._future.then$2$onError(function$, onError);
  },
  then$1: function(function$) {
    return this.then$2$onError(function$, null);
  },
  catchError$2$test: function(function$, test) {
    return this._future.catchError$2$test(function$, test);
  },
  catchError$1: function(function$) {
    return this.catchError$2$test(function$, null);
  },
  is$Future: true
};

$$.Game = {"": "Object;curLevel,curX,curY,curPiece,skyline,boardDrawn,gamePaused,gameStarted,sayingBye,timer,numLines,speed,squareImages,board,xToErase,yToErase,dx,dy,dxPrime,dyPrime,dxBank,dyBank,random,isActiveLeft,isActiveRight,isActiveUp,isActiveDown,isActiveSpace,timerLeft,timerRight,timerDown",
  run$0: function() {
    this.drawBoard$0();
    this.resetGame$0();
  },
  start$0: function() {
    var t1, t2, t3;
    if (this.sayingBye) {
      window.get$history().back$0();
      this.sayingBye = false;
    }
    t1 = this.gameStarted;
    if (t1) {
      t2 = this.boardDrawn;
      if (!t2)
        return;
      t3 = this.gamePaused;
      if (t3)
        if (t2 && t1 && t3) {
          this.play$0();
          this.gamePaused = false;
        }
      return;
    }
    this.getPiece$0();
    this.drawPiece$0();
    this.gameStarted = true;
    this.gamePaused = false;
    document.query$1("#num-lines").set$value($.CONSTANT2.toString$0(this.numLines));
    this.timer = $.Timer_Timer(this.speed, new $.Game_start_anon(this));
  },
  drawBoard$0: function() {
    var boardDiv, pre, t1, i, div, j, img, rightMargin, trailingDiv, trailingImg;
    boardDiv = document.query$1("#board-div");
    pre = $.Element_Element$tag("pre");
    t1 = boardDiv.get$nodes();
    $.getInterceptor$JSArray(t1).add$1(t1, pre);
    t1 = pre.get$classes();
    $.getInterceptor$JSArray(t1).add$1(t1, "board");
    for (i = 0; i < 16; ++i) {
      div = $.Element_Element$tag("div");
      t1 = pre.get$nodes();
      $.getInterceptor$JSArray(t1).add$1(t1, div);
      for (j = 0; j < 10; ++j) {
        img = $.Element_Element$tag("img");
        t1 = div.get$nodes();
        $.getInterceptor$JSArray(t1).add$1(t1, img);
        img.set$id("s-" + $.S(i) + "-" + $.S(j));
        t1 = this.board;
        t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
        t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, j);
        img.set$src("images/s" + $.S($.getInterceptor$JSNumber(t1).abs$0(t1)) + ".png");
        img.set$width(16);
        img.set$height(16);
      }
      rightMargin = $.Element_Element$tag("img");
      t1 = div.get$nodes();
      $.getInterceptor$JSArray(t1).add$1(t1, rightMargin);
      rightMargin.set$src("images/g.png");
      rightMargin.set$width(1);
      rightMargin.set$height(16);
    }
    trailingDiv = $.Element_Element$tag("div");
    t1 = pre.get$nodes();
    $.getInterceptor$JSArray(t1).add$1(t1, trailingDiv);
    trailingImg = $.Element_Element$tag("img");
    t1 = trailingDiv.get$nodes();
    $.getInterceptor$JSArray(t1).add$1(t1, trailingImg);
    trailingImg.set$src("images/g.png");
    trailingImg.set$id("board-trailing-img");
    trailingImg.set$width(161);
    trailingImg.set$height(1);
    this.boardDrawn = true;
  },
  resetGame$0: function() {
    var i, j, t1;
    for (i = 0; i < 16; ++i)
      for (j = 0; j < 10; ++j) {
        t1 = this.board;
        t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
        $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, j, 0);
        document.query$1("#s-" + $.S(i) + "-" + $.S(j)).set$src("images/s0.png");
      }
    this.gameStarted = false;
    this.gamePaused = false;
    this.numLines = 0;
    this.curLevel = 1;
    this.skyline = 15;
    document.query$1("#num-lines").set$value($.CONSTANT2.toString$0(this.numLines));
    document.query$1("#level-select").set$selectedIndex(0);
    this.onLevelSelectChange$0();
  },
  play$0: function() {
    if (this.moveDown$0() === true)
      this.timer = $.Timer_Timer(this.speed, new $.Game_play_anon(this));
    else {
      this.fillMatrix$0();
      this.removeLines$0();
      if (this.skyline > 0 && this.getPiece$0() === true)
        this.timer = $.Timer_Timer(this.speed, new $.Game_play_anon0(this));
      else {
        this.isActiveLeft = false;
        this.isActiveUp = false;
        this.isActiveRight = false;
        this.isActiveDown = false;
        window.alert$1("Game over!");
        this.resetGame$0();
      }
    }
  },
  pause$0: function() {
    var t1, t2;
    t1 = this.boardDrawn;
    if (t1 && this.gameStarted) {
      t2 = this.gamePaused;
      if (t2) {
        if (t1 && this.gameStarted && t2) {
          this.play$0();
          this.gamePaused = false;
        }
        return;
      }
      this.timer.cancel$0();
      this.gamePaused = true;
    }
  },
  onKeyDown$1: function(event$) {
    var keyNN, keyIE;
    keyNN = " " + $.S(event$.get$keyCode()) + " ";
    keyIE = " " + $.S(event$.get$keyCode()) + " ";
    if (!this.gameStarted || !this.boardDrawn || this.gamePaused)
      return;
    if (!$.eqB($.CONSTANT1.indexOf$1(" 52 ", keyNN), -1) || !$.eqB($.CONSTANT1.indexOf$1(" 37 52 100 ", keyIE), -1)) {
      if (!this.isActiveLeft) {
        this.isActiveLeft = true;
        this.isActiveRight = false;
        this.moveLeft$0();
        this.timerLeft = $.Timer_Timer(200, new $.Game_onKeyDown_anon(this));
      }
    } else if (!$.eqB($.CONSTANT1.indexOf$1(" 54 ", keyNN), -1) || !$.eqB($.CONSTANT1.indexOf$1(" 39 54 102 ", keyIE), -1)) {
      if (!this.isActiveRight) {
        this.isActiveRight = true;
        this.isActiveLeft = false;
        this.moveRight$0();
        this.timerRight = $.Timer_Timer(200, new $.Game_onKeyDown_anon0(this));
      }
    } else if (!$.eqB($.CONSTANT1.indexOf$1(" 56 53 ", keyNN), -1) || !$.eqB($.CONSTANT1.indexOf$1(" 38 56 53 104 101 ", keyIE), -1)) {
      if (!this.isActiveUp) {
        this.isActiveUp = true;
        this.isActiveDown = false;
        this.rotate$0();
      }
    } else if (!$.eqB($.CONSTANT1.indexOf$1(" 32 ", keyNN), -1) || !$.eqB($.CONSTANT1.indexOf$1(" 32 ", keyIE), -1)) {
      if (!this.isActiveSpace) {
        this.isActiveSpace = true;
        this.isActiveDown = false;
        this.fall$0();
      }
    } else if (!$.eqB($.CONSTANT1.indexOf$1(" 50 ", keyNN), -1) || !$.eqB($.CONSTANT1.indexOf$1(" 40 50 98 ", keyIE), -1)) {
      if (!this.isActiveDown) {
        this.isActiveDown = true;
        this.isActiveUp = false;
        this.moveDown$0();
        this.timerDown = $.Timer_Timer(200, new $.Game_onKeyDown_anon1(this));
      }
    } else
      return;
    event$.preventDefault$0();
  },
  get$onKeyDown: function() {
    return new $.BoundClosure(this, "onKeyDown$1");
  },
  onKeyUp$1: function(event$) {
    var keyNN, keyIE;
    keyNN = " " + $.S(event$.get$keyCode()) + " ";
    keyIE = " " + $.S(event$.get$keyCode()) + " ";
    if (!$.eqB($.CONSTANT1.indexOf$1(" 52 ", keyNN), -1) || !$.eqB($.CONSTANT1.indexOf$1(" 37 52 100 ", keyIE), -1)) {
      this.isActiveLeft = false;
      this.timerLeft.cancel$0();
    } else if (!$.eqB($.CONSTANT1.indexOf$1(" 54 ", keyNN), -1) || !$.eqB($.CONSTANT1.indexOf$1(" 39 54 102 ", keyIE), -1)) {
      this.isActiveRight = false;
      this.timerRight.cancel$0();
    } else if (!$.eqB($.CONSTANT1.indexOf$1(" 56 53 ", keyNN), -1) || !$.eqB($.CONSTANT1.indexOf$1(" 38 56 53 104 101 ", keyIE), -1))
      this.isActiveUp = false;
    else if (!$.eqB($.CONSTANT1.indexOf$1(" 50 ", keyNN), -1) || !$.eqB($.CONSTANT1.indexOf$1(" 40 50 98 ", keyIE), -1)) {
      this.isActiveDown = false;
      this.timerDown.cancel$0();
    } else if (!$.eqB($.CONSTANT1.indexOf$1(" 32 ", keyNN), -1) || !$.eqB($.CONSTANT1.indexOf$1(" 32 ", keyIE), -1))
      this.isActiveSpace = false;
    else
      return;
    event$.preventDefault$0();
  },
  get$onKeyUp: function() {
    return new $.BoundClosure(this, "onKeyUp$1");
  },
  fillMatrix$0: function() {
    var k, t1, t2, x, y;
    for (k = 0; k < 4; ++k) {
      t1 = this.curX;
      t2 = this.dx;
      t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, k);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      x = t1 + t2;
      t2 = this.curY;
      t1 = this.dy;
      t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, k);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      y = t2 + t1;
      if (0 <= y && y < 16 && 0 <= x && x < 10) {
        t1 = this.board;
        t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, y);
        t2 = this.curPiece;
        $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, x, t2);
        if (y < this.skyline)
          this.skyline = y;
      }
    }
  },
  removeLines$0: function() {
    var i, k, j, gapFound, t1, k0, t2, img, levelSelect;
    for (i = 0, k = null; i < 16; ++i) {
      for (j = 0; gapFound = false, j < 10; ++j) {
        t1 = this.board;
        t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
        if ($.eqB($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, j), 0)) {
          gapFound = true;
          break;
        }
      }
      if (!gapFound) {
        for (k = i; k >= this.skyline; k = k0)
          for (k0 = k - 1, j = 0; j < 10; ++j) {
            t1 = this.board;
            t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, k);
            t2 = this.board;
            t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, k0);
            t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, j);
            $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, j, t2);
            img = document.query$1("#s-" + $.S(k) + "-" + $.S(j));
            t2 = this.squareImages;
            t1 = this.board;
            t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, k);
            t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, j);
            img.set$src($.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, t1).get$src());
          }
        for (j = 0; j < 10; ++j) {
          t1 = this.board;
          t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0);
          $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, j, 0);
          img = document.query$1("#s-0-" + $.S(j));
          t1 = this.squareImages;
          img.set$src($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0).get$src());
        }
        this.numLines = this.numLines + 1;
        this.skyline = this.skyline + 1;
        document.query$1("#num-lines").set$value($.CONSTANT2.toString$0(this.numLines));
        if ($.CONSTANT2.operator$mod$1(this.numLines, 5) === 0 && $.ltB(this.curLevel, 10)) {
          t1 = this.curLevel;
          this.curLevel = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
        }
        t1 = this.curLevel;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        this.speed = 700 - 60 * t1;
        levelSelect = document.query$1("#level-select");
        t2 = this.curLevel;
        levelSelect.set$selectedIndex($.getInterceptor$JSNumber(t2).operator$sub$1(t2, 1));
      }
    }
  },
  pieceFits$2: function(x, y) {
    var k, t1, theX, theY, t2;
    for (k = 0; k < 4; ++k) {
      t1 = this.dxPrime;
      t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, k);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      theX = x + t1;
      t1 = this.dyPrime;
      t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, k);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      theY = y + t1;
      if (theX < 0 || theX >= 10 || theY >= 16)
        return false;
      if (theY > -1) {
        t1 = this.board;
        t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, theY);
        t2 = $.gtB($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, theX), 0);
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        return false;
    }
    return true;
  },
  erasePiece$0: function() {
    var k, t1, t2, x, y;
    if (this.boardDrawn)
      for (k = 0; k < 4; ++k) {
        t1 = this.curX;
        t2 = this.dx;
        t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, k);
        if (typeof t2 !== "number")
          throw $.iae(t2);
        x = t1 + t2;
        t2 = this.curY;
        t1 = this.dy;
        t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, k);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        y = t2 + t1;
        if (0 <= y && y < 16 && 0 <= x && x < 10) {
          t1 = this.xToErase;
          $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, k, x);
          t1 = this.yToErase;
          $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, k, y);
          t1 = this.board;
          t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, y);
          $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, x, 0);
        }
      }
  },
  drawPiece$0: function() {
    var k, t1, t2, x, y, t3, img, t4;
    if (this.boardDrawn)
      for (k = 0; k < 4; ++k) {
        t1 = this.curX;
        t2 = this.dx;
        t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, k);
        if (typeof t2 !== "number")
          throw $.iae(t2);
        x = t1 + t2;
        t2 = this.curY;
        t1 = this.dy;
        t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, k);
        if (typeof t1 !== "number")
          throw $.iae(t1);
        y = t2 + t1;
        if (0 <= y)
          if (y < 16)
            if (0 <= x)
              if (x < 10) {
                t1 = this.board;
                t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, y);
                t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, x);
                t2 = this.curPiece;
                t3 = !$.eqB(t1, $.getInterceptor$JSNumber(t2).operator$negate$0(t2));
                t1 = t3;
              } else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
        if (t1) {
          img = document.query$1("#s-" + $.S(y) + "-" + $.S(x));
          t1 = this.squareImages;
          t2 = this.curPiece;
          img.set$src($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t2).get$src());
          t3 = this.board;
          t3 = $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, y);
          t4 = this.curPiece;
          t4 = $.getInterceptor$JSNumber(t4).operator$negate$0(t4);
          $.getInterceptor$JSArray(t3).operator$indexSet$2(t3, x, t4);
        }
        t1 = this.xToErase;
        x = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, k);
        t1 = this.yToErase;
        y = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, k);
        t1 = this.board;
        t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, y);
        if ($.eqB($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, x), 0)) {
          img = document.query$1("#s-" + $.S(y) + "-" + $.S(x));
          t1 = this.squareImages;
          img.set$src($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, 0).get$src());
        }
      }
  },
  moveDown$0: function() {
    var k, t1, t2;
    for (k = 0; k < 4; ++k) {
      t1 = this.dxPrime;
      t2 = this.dx;
      t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, k);
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, k, t2);
      t2 = this.dyPrime;
      t1 = this.dy;
      t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, k);
      $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, k, t1);
    }
    if (this.pieceFits$2(this.curX, this.curY + 1) === true) {
      this.erasePiece$0();
      this.curY = this.curY + 1;
      this.drawPiece$0();
      return true;
    }
    return false;
  },
  moveLeft$0: function() {
    var k, t1, t2;
    for (k = 0; k < 4; ++k) {
      t1 = this.dxPrime;
      t2 = this.dx;
      t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, k);
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, k, t2);
      t2 = this.dyPrime;
      t1 = this.dy;
      t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, k);
      $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, k, t1);
    }
    if (this.pieceFits$2(this.curX - 1, this.curY) === true) {
      this.erasePiece$0();
      this.curX = this.curX - 1;
      this.drawPiece$0();
    }
  },
  moveRight$0: function() {
    var k, t1, t2;
    for (k = 0; k < 4; ++k) {
      t1 = this.dxPrime;
      t2 = this.dx;
      t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, k);
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, k, t2);
      t2 = this.dyPrime;
      t1 = this.dy;
      t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, k);
      $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, k, t1);
    }
    if (this.pieceFits$2(this.curX + 1, this.curY) === true) {
      this.erasePiece$0();
      this.curX = this.curX + 1;
      this.drawPiece$0();
    }
  },
  getPiece$0: function() {
    var t1, k, t2, t3;
    t1 = this.random.nextInt$1(7);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this.curPiece = 1 + t1;
    this.curX = 5;
    this.curY = 0;
    for (k = 0; k < 4; ++k) {
      t1 = this.dx;
      t2 = this.dxBank;
      t3 = this.curPiece;
      t3 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, t3);
      t3 = $.getInterceptor$JSStringJSArray(t3).operator$index$1(t3, k);
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, k, t3);
      t3 = this.dy;
      t1 = this.dyBank;
      t2 = this.curPiece;
      t2 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t2);
      t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, k);
      $.getInterceptor$JSArray(t3).operator$indexSet$2(t3, k, t2);
    }
    for (k = 0; k < 4; ++k) {
      t1 = this.dxPrime;
      t2 = this.dx;
      t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, k);
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, k, t2);
      t2 = this.dyPrime;
      t1 = this.dy;
      t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, k);
      $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, k, t1);
    }
    if (this.pieceFits$2(this.curX, this.curY) === true) {
      this.drawPiece$0();
      return true;
    }
    return false;
  },
  onLevelSelectChange$0: function() {
    var levelSelect, t1, t2, t3;
    levelSelect = document.query$1("#level-select");
    t1 = levelSelect.get$options();
    t2 = levelSelect.get$selectedIndex();
    this.curLevel = $.int_parse($.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, t2).get$value(), null, null);
    t3 = this.curLevel;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    this.speed = 700 - 60 * t3;
  },
  rotate$0: function() {
    var k, t1, t2;
    for (k = 0; k < 4; ++k) {
      t1 = this.dxPrime;
      t2 = this.dy;
      t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, k);
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, k, t2);
      t2 = this.dyPrime;
      t1 = this.dx;
      t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, k);
      t1 = $.getInterceptor$JSNumber(t1).operator$negate$0(t1);
      $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, k, t1);
    }
    if (this.pieceFits$2(this.curX, this.curY) === true) {
      this.erasePiece$0();
      for (k = 0; k < 4; ++k) {
        t1 = this.dx;
        t2 = this.dxPrime;
        t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, k);
        $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, k, t2);
        t2 = this.dy;
        t1 = this.dyPrime;
        t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, k);
        $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, k, t1);
      }
      this.drawPiece$0();
    }
  },
  fall$0: function() {
    var k, t1, t2;
    for (k = 0; k < 4; ++k) {
      t1 = this.dxPrime;
      t2 = this.dx;
      t2 = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, k);
      $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, k, t2);
      t2 = this.dyPrime;
      t1 = this.dy;
      t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, k);
      $.getInterceptor$JSArray(t2).operator$indexSet$2(t2, k, t1);
    }
    if (this.pieceFits$2(this.curX, this.curY + 1) !== true)
      return;
    this.timer.cancel$0();
    this.erasePiece$0();
    for (; this.pieceFits$2(this.curX, this.curY + 1) === true;)
      this.curY = this.curY + 1;
    this.drawPiece$0();
    this.timer = $.Timer_Timer(this.speed, new $.Game_fall_anon(this));
  },
  slideLeft$0: function() {
    if (this.isActiveLeft) {
      this.moveLeft$0();
      this.timerLeft = $.Timer_Timer(20, new $.Game_slideLeft_anon(this));
    }
  },
  slideRight$0: function() {
    if (this.isActiveRight) {
      this.moveRight$0();
      this.timerRight = $.Timer_Timer(20, new $.Game_slideRight_anon(this));
    }
  },
  slideDown$0: function() {
    if (this.isActiveDown) {
      this.moveDown$0();
      this.timerDown = $.Timer_Timer(20, new $.Game_slideDown_anon(this));
    }
  },
  Game$0: function() {
    var i, img, t1, t2, j, levelSelect, startButton, pauseButton;
    this.squareImages = [];
    this.board = [];
    this.xToErase = [0, 0, 0, 0];
    this.yToErase = [0, 0, 0, 0];
    this.dx = [0, 0, 0, 0];
    this.dy = [0, 0, 0, 0];
    this.dxPrime = [0, 0, 0, 0];
    this.dyPrime = [0, 0, 0, 0];
    this.dxBank = [[], [0, 1, -1, 0], [0, 1, -1, -1], [0, 1, -1, 1], [0, -1, 1, 0], [0, 1, -1, 0], [0, 1, -1, -2], [0, 1, 1, 0]];
    this.dyBank = [[], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 0, 0], [0, 0, 1, 1]];
    for (i = 0; i < 8; ++i) {
      img = $.Element_Element$tag("img");
      img.set$src("images/s" + $.S(i) + ".png");
      t1 = this.squareImages;
      $.getInterceptor$JSArray(t1).add$1(t1, img);
    }
    for (i = 0; i < 16; ++i) {
      t1 = this.board;
      t2 = [];
      $.getInterceptor$JSArray(t1).add$1(t1, t2);
      for (j = 0; j < 10; ++j) {
        t1 = this.board;
        t1 = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, i);
        $.getInterceptor$JSArray(t1).add$1(t1, 0);
      }
    }
    t1 = $.document().get$on().get$keyDown();
    t2 = this.get$onKeyDown();
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
    t2 = $.document().get$on().get$keyUp();
    t1 = this.get$onKeyUp();
    $.getInterceptor$JSArray(t2).add$1(t2, t1);
    levelSelect = $.document().query$1("#level-select");
    t1 = levelSelect.get$on().get$change();
    t2 = new $.anon(this, levelSelect);
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
    startButton = $.document().query$1("#start-button");
    pauseButton = $.document().query$1("#pause-button");
    t2 = startButton.get$on().get$click();
    t1 = new $.anon0(this);
    $.getInterceptor$JSArray(t2).add$1(t2, t1);
    t1 = pauseButton.get$on().get$click();
    t2 = new $.anon1(this);
    $.getInterceptor$JSArray(t1).add$1(t1, t2);
  }
};

$$.BodyElementEvents = {"": "ElementEvents;_ptr",
  get$blur: function() {
    return this.operator$index$1("blur");
  },
  blur$0: function() {
    return this.get$blur().call$0();
  },
  get$error: function() {
    return this.operator$index$1("error");
  }
};

$$.DocumentEvents = {"": "ElementEvents;_ptr"};

$$._FrozenCssClassSet = {"": "CssClassSet;",
  writeClasses$1: function(s) {
    throw $.$$throw($.UnsupportedError$("frozen class set cannot be modified"));
  },
  readClasses$0: function() {
    return $.Set_Set();
  }
};

$$._ChildrenElementList = {"": "Object;_element,_childElements",
  toList$0: function() {
    var t1, t3, output, len, i, t2;
    t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.toList$0$bailout(1, t1);
    t3 = t1.length;
    output = $.List_List$fixedLength(t3, null);
    for (len = t1.length, i = 0; i < len; ++i) {
      t2 = t1[i];
      if (i >= t3)
        throw $.ioore(i);
      output[i] = t2;
    }
    return output;
  },
  toList$0$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        t1 = env0;
        break;
      case 2:
        output = env3;
        len = env2;
        t3 = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._childElements;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSStringJSArray(t1);
        output = $.List_List$fixedLength(t3.get$length(t1), null);
        len = t3.get$length(t1);
      case 2:
        var t1, t3, output, len, i, t2;
        state0 = 0;
        i = 0;
        for (; $.ltB(i, len); ++i) {
          t2 = t3.operator$index$1(t1, i);
          if (i >= output.length)
            throw $.ioore(i);
          output[i] = t2;
        }
        return output;
    }
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this._childElements, t1 = $.getInterceptor$JSArray(t1).get$iterator(t1); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  get$isEmpty: function() {
    return this._element.firstElementChild == null;
  },
  get$length: function() {
    var t1 = this._childElements;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  operator$index$1: function(index) {
    var t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout(1, t1, index);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout: function(state0, t1, index) {
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  operator$indexSet$2: function(index, value) {
    var t1, t2;
    t1 = this._element;
    t2 = this._childElements;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
      return this.operator$indexSet$2$bailout(1, index, value, t1, t2);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t2.length)
      throw $.ioore(index);
    t1.$$dom_replaceChild$2(value, t2[index]);
  },
  operator$indexSet$2$bailout: function(state0, index, value, t1, t2) {
    t1.$$dom_replaceChild$2(value, $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, index));
  },
  set$length: function(newLength) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  add$1: function(value) {
    this._element.$$dom_appendChild$1(value);
    return value;
  },
  addLast$1: function(value) {
    this._element.$$dom_appendChild$1(value);
    return value;
  },
  get$iterator: function() {
    var t1 = this.toList$0();
    return $.getInterceptor$JSArray(t1).get$iterator(t1);
  },
  remove$1: function(object) {
    if (typeof object === "object" && object !== null && object.is$Element())
      if (object.parentNode === this)
        this._element.$$dom_removeChild$1(object);
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  clear$0: function() {
    this._element.textContent = "";
  },
  removeLast$0: function() {
    var result = $.getInterceptor$JSArray(this).get$last(this);
    if (!(result == null))
      this._element.$$dom_removeChild$1(result);
    return result;
  },
  get$last: function() {
    var result = this._element.lastElementChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$._ElementCssClassSet = {"": "CssClassSet;_element",
  readClasses$0: function() {
    var s, classname, t1, t2, t3, trimmed;
    s = $.Set_Set();
    classname = this._element.className;
    for (t1 = $.getInterceptor$JSString(classname).split$1(classname, " "), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1), t2 = $.getInterceptor$JSArray(s); t1.moveNext$0() === true;) {
      t3 = t1.get$current();
      trimmed = $.getInterceptor$JSString(t3).trim$0(t3);
      if ($.getInterceptor$JSStringJSArray(trimmed).get$isEmpty(trimmed) !== true)
        t2.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    var t1;
    $.List_List$from(s);
    t1 = $.getInterceptor$JSArray(s).join$1(s, " ");
    this._element.className = t1;
  }
};

$$.ElementEvents = {"": "Events;_ptr",
  get$blur: function() {
    return this.operator$index$1("blur");
  },
  blur$0: function() {
    return this.get$blur().call$0();
  },
  get$change: function() {
    return this.operator$index$1("change");
  },
  get$click: function() {
    return this.operator$index$1("click");
  },
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$keyDown: function() {
    return this.operator$index$1("keydown");
  },
  get$keyUp: function() {
    return this.operator$index$1("keyup");
  },
  get$reset: function() {
    return this.operator$index$1("reset");
  },
  reset$0: function() {
    return this.get$reset().call$0();
  }
};

$$.Events = {"": "Object;_ptr",
  operator$index$1: function(type) {
    return $.EventListenerList$(this._ptr, type);
  }
};

$$.EventListenerList = {"": "Object;_ptr,_type",
  add$2: function(listener, useCapture) {
    this._ptr.$$dom_addEventListener$3(this._type, listener, useCapture);
    return this;
  },
  add$1: function(listener) {
    return this.add$2(listener, false);
  },
  remove$2: function(listener, useCapture) {
    this._ptr.$$dom_removeEventListener$3(this._type, listener, useCapture);
    return this;
  },
  remove$1: function(listener) {
    return this.remove$2(listener, false);
  }
};

$$.InputElementEvents = {"": "ElementEvents;_ptr"};

$$.MediaElementEvents = {"": "ElementEvents;_ptr",
  get$pause: function() {
    return this.operator$index$1("pause");
  },
  pause$0: function() {
    return this.get$pause().call$0();
  },
  get$play: function() {
    return this.operator$index$1("play");
  },
  play$0: function() {
    return this.get$play().call$0();
  }
};

$$._ChildNodeListLazy = {"": "Object;_this",
  get$last: function() {
    var result = this._this.lastChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  add$1: function(value) {
    this._this.$$dom_appendChild$1(value);
  },
  addLast$1: function(value) {
    this._this.$$dom_appendChild$1(value);
  },
  removeLast$0: function() {
    var result = $.getInterceptor$JSArray(this).get$last(this);
    if (!(result == null))
      this._this.$$dom_removeChild$1(result);
    return result;
  },
  remove$1: function(object) {
    if (!(typeof object === "object" && object !== null && object.is$Node()))
      return;
    if (!(this === object.parentNode))
      return;
    this._this.$$dom_removeChild$1(object);
  },
  clear$0: function() {
    this._this.textContent = "";
  },
  operator$indexSet$2: function(index, value) {
    this._this.$$dom_replaceChild$2(value, this.operator$index$1(index));
  },
  get$iterator: function() {
    var t1 = this._this.childNodes;
    return $.getInterceptor$JSArray(t1).get$iterator(t1);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$length: function() {
    var t1 = this._this.childNodes;
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot set length on immutable List."));
  },
  operator$index$1: function(index) {
    var t1 = this._this.childNodes;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.operator$index$1$bailout1(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  operator$index$1$bailout1: function(state0, index, t1) {
    return $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, index);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  }
};

$$.WindowEvents = {"": "Events;_ptr",
  get$blur: function() {
    return this.operator$index$1("blur");
  },
  blur$0: function() {
    return this.get$blur().call$0();
  },
  get$change: function() {
    return this.operator$index$1("change");
  },
  get$click: function() {
    return this.operator$index$1("click");
  },
  get$error: function() {
    return this.operator$index$1("error");
  },
  get$keyDown: function() {
    return this.operator$index$1("keydown");
  },
  get$keyUp: function() {
    return this.operator$index$1("keyup");
  },
  get$pause: function() {
    return this.operator$index$1("pause");
  },
  pause$0: function() {
    return this.get$pause().call$0();
  },
  get$play: function() {
    return this.operator$index$1("play");
  },
  play$0: function() {
    return this.get$play().call$0();
  },
  get$reset: function() {
    return this.operator$index$1("reset");
  },
  reset$0: function() {
    return this.get$reset().call$0();
  }
};

$$._FrameSetElementEvents = {"": "ElementEvents;_ptr",
  get$blur: function() {
    return this.operator$index$1("blur");
  },
  blur$0: function() {
    return this.get$blur().call$0();
  },
  get$error: function() {
    return this.operator$index$1("error");
  }
};

$$._AttributeMap = {"": "Object;",
  clear$0: function() {
    for (var t1 = this.get$keys(), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1); t1.moveNext$0() === true;)
      this.remove$1(t1.get$current());
  },
  forEach$1: function(f) {
    var t1, t2;
    for (t1 = this.get$keys(), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      f.call$2(t2, this.operator$index$1(t2));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i;
    attributes = this._element.attributes;
    if (typeof attributes !== "string" && (typeof attributes !== "object" || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
      return this.get$keys$bailout(1, attributes);
    keys = $.List_List(0);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      if (this._matches$1(attributes[i]) === true) {
        if (i >= attributes.length)
          throw $.ioore(i);
        keys.push(attributes[i].get$$$dom_localName());
      }
    }
    return keys;
  },
  get$keys$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        attributes = env0;
        break;
      case 2:
        keys = env3;
        len = env2;
        attributes = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        attributes = this._element.attributes;
      case 1:
        state0 = 0;
        keys = $.List_List(0);
        t1 = $.getInterceptor$JSStringJSArray(attributes);
        len = t1.get$length(attributes);
      case 2:
        var attributes, keys, t1, len, i;
        state0 = 0;
        i = 0;
        for (; $.ltB(i, len); ++i)
          if (this._matches$1(t1.operator$index$1(attributes, i)) === true)
            keys.push(t1.operator$index$1(attributes, i).get$$$dom_localName());
        return keys;
    }
  },
  get$values: function() {
    var attributes, values, len, i;
    attributes = this._element.attributes;
    if (typeof attributes !== "string" && (typeof attributes !== "object" || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
      return this.get$values$bailout(1, attributes);
    values = $.List_List(0);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      if (this._matches$1(attributes[i]) === true) {
        if (i >= attributes.length)
          throw $.ioore(i);
        values.push(attributes[i].get$value());
      }
    }
    return values;
  },
  get$values$bailout: function(state0, env0, env1, env2, env3) {
    switch (state0) {
      case 1:
        attributes = env0;
        break;
      case 2:
        values = env3;
        len = env2;
        attributes = env1;
        t1 = env0;
        break;
    }
    switch (state0) {
      case 0:
        attributes = this._element.attributes;
      case 1:
        state0 = 0;
        values = $.List_List(0);
        t1 = $.getInterceptor$JSStringJSArray(attributes);
        len = t1.get$length(attributes);
      case 2:
        var attributes, values, t1, len, i;
        state0 = 0;
        i = 0;
        for (; $.ltB(i, len); ++i)
          if (this._matches$1(t1.operator$index$1(attributes, i)) === true)
            values.push(t1.operator$index$1(attributes, i).get$value());
        return values;
    }
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  is$Map: function() {
    return true;
  }
};

$$._ElementAttributeMap = {"": "_AttributeMap;_element",
  containsKey$1: function(key) {
    return this._element.$$dom_hasAttribute$1(key);
  },
  operator$index$1: function(key) {
    return this._element.$$dom_getAttribute$1(key);
  },
  operator$indexSet$2: function(key, value) {
    this._element.$$dom_setAttribute$2(key, $.S(value));
  },
  remove$1: function(key) {
    var t1, value;
    t1 = this._element;
    value = t1.$$dom_getAttribute$1(key);
    t1.$$dom_removeAttribute$1(key);
    return value;
  },
  get$length: function() {
    var t1 = this.get$keys();
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  _matches$1: function(node) {
    return node.get$$$dom_namespaceUri() == null;
  }
};

$$.CssClassSet = {"": "Object;",
  toString$0: function() {
    return $.Strings_join($.List_List$from(this.readClasses$0()), " ");
  },
  get$iterator: function() {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).get$iterator(t1);
  },
  forEach$1: function(f) {
    var t1 = this.readClasses$0();
    $.getInterceptor$JSArray(t1).forEach$1(t1, f);
  },
  join$1: function(separator) {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).join$1(t1, separator);
  },
  where$1: function(f) {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).where$1(t1, f);
  },
  get$isEmpty: function() {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSStringJSArray(t1).get$isEmpty(t1);
  },
  get$length: function() {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSStringJSArray(t1).get$length(t1);
  },
  add$1: function(value) {
    this._modify$1(new $.CssClassSet_add_anon(value));
  },
  remove$1: function(value) {
    var s, result;
    if (!(typeof value === "string"))
      return false;
    s = this.readClasses$0();
    result = $.getInterceptor$JSArray(s).remove$1(s, value);
    this.writeClasses$1(s);
    return result;
  },
  get$last: function() {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).get$last(t1);
  },
  toList$0: function() {
    var t1 = this.readClasses$0();
    return $.getInterceptor$JSArray(t1).toList$0(t1);
  },
  clear$0: function() {
    this._modify$1(new $.CssClassSet_clear_anon());
  },
  _modify$1: function(f) {
    var s = this.readClasses$0();
    f.call$1(s);
    this.writeClasses$1(s);
  },
  is$Collection: function() {
    return true;
  }
};

$$.FixedSizeListIterator = {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(2, t1, nextPosition);
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout(3, nextPosition, t1);
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, env0, env1) {
    switch (state0) {
      case 1:
        t1 = env0;
        break;
      case 2:
        nextPosition = env1;
        t1 = env0;
        break;
      case 3:
        t1 = env1;
        nextPosition = env0;
        break;
    }
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
        t1 = this._length;
      case 2:
        state0 = 0;
      case 3:
        var t1, nextPosition;
        if (state0 === 3 || state0 === 0 && $.ltB(nextPosition, t1))
          switch (state0) {
            case 0:
              t1 = this._array;
            case 3:
              state0 = 0;
              this._current = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, nextPosition);
              this._position = nextPosition;
              return true;
          }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$._Random = {"": "Object;",
  nextInt$1: function(max) {
    if (max < 0)
      throw $.$$throw($.ArgumentError$("negative max: " + $.S(max)));
    if (max > 4294967295)
      max = 4294967295;
    return (Math.random() * max) >>> 0;
  }
};

$$._AttributeClassSet = {"": "CssClassSet;_liblib3$_element",
  readClasses$0: function() {
    var t1, classname, s, t2, t3, trimmed;
    t1 = this._liblib3$_element.get$attributes();
    classname = $.getInterceptor$JSStringJSArray(t1).operator$index$1(t1, "class");
    s = $.Set_Set();
    if (classname == null)
      return s;
    for (t1 = $.getInterceptor$JSString(classname).split$1(classname, " "), t1 = $.getInterceptor$JSArray(t1).get$iterator(t1), t2 = $.getInterceptor$JSArray(s); t1.moveNext$0() === true;) {
      t3 = t1.get$current();
      trimmed = $.getInterceptor$JSString(t3).trim$0(t3);
      if ($.getInterceptor$JSStringJSArray(trimmed).get$isEmpty(trimmed) !== true)
        t2.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    var list, t1, t2;
    list = $.List_List$from(s);
    t1 = this._liblib3$_element.get$attributes();
    t2 = $.Strings_join(list, " ");
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, "class", t2);
  }
};

$$.Maps__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (t1.first_0 !== true) {
      t2 = this.result_1;
      $.getInterceptor$JSArray(t2).add$1(t2, ", ");
    }
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.Collections__emitObject(k, t1, t2);
    $.getInterceptor$JSArray(t1).add$1(t1, ": ");
    $.Collections__emitObject(v, t1, t2);
  }
};

$$.SelectElement_options_anon = {"": "Closure;",
  call$1: function(e) {
    return typeof e === "object" && e !== null && e.is$OptionElement();
  }
};

$$._LinkedHashMapImpl_forEach_anon = {"": "Closure;f_0",
  call$1: function(entry) {
    this.f_0.call$2(entry.get$key(), entry.get$value());
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2, t3;
    t1 = this.box_0;
    if ($.gtB(t1.i_1, 0)) {
      t2 = t1.sb_0;
      $.getInterceptor$JSArray(t2).add$1(t2, ", ");
    }
    t2 = t1.sb_0;
    $.getInterceptor$JSArray(t2).add$1(t2, key);
    t2 = t1.sb_0;
    $.getInterceptor$JSArray(t2).add$1(t2, ": ");
    t2 = t1.sb_0;
    t3 = $.Error_safeToString(value);
    $.getInterceptor$JSArray(t2).add$1(t2, t3);
    t3 = t1.i_1;
    t1.i_1 = $.getInterceptor$JSNumber(t3).operator$add$1(t3, 1);
  }
};

$$.CssClassSet_clear_anon = {"": "Closure;",
  call$1: function(s) {
    return $.getInterceptor$JSArray(s).clear$0(s);
  }
};

$$.HashSet_forEach_anon = {"": "Closure;f_0",
  call$2: function(key, value) {
    this.f_0.call$1(key);
  }
};

$$.CssClassSet_add_anon = {"": "Closure;value_0",
  call$1: function(s) {
    var t1 = this.value_0;
    return $.getInterceptor$JSArray(s).add$1(s, t1);
  }
};

$$.anon = {"": "Closure;this_0,levelSelect_1",
  call$1: function(e) {
    this.this_0.onLevelSelectChange$0();
    this.levelSelect_1.blur$0();
  }
};

$$.anon0 = {"": "Closure;this_2",
  call$1: function(event$) {
    return this.this_2.start$0();
  }
};

$$.anon1 = {"": "Closure;this_3",
  call$1: function(event$) {
    return this.this_3.pause$0();
  }
};

$$.Game_play_anon = {"": "Closure;this_0",
  call$1: function(timer) {
    return this.this_0.play$0();
  }
};

$$.Game_play_anon0 = {"": "Closure;this_1",
  call$1: function(timer) {
    return this.this_1.play$0();
  }
};

$$.anon2 = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$1(this.this_0);
  }
};

$$.internalCallback = {"": "Closure;this_2,callback_3",
  call$0: function() {
    var t1, t2;
    t1 = this.callback_3;
    t2 = this.this_2;
    t1.call$1(t2);
    t2.set$_handle(null);
    t2 = $globalState.get$topEventLoop();
    t1 = t2.get$activeTimerCount();
    t2.set$activeTimerCount($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
  }
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
};

$$.Game_start_anon = {"": "Closure;this_0",
  call$1: function(timer) {
    return this.this_0.play$0();
  }
};

$$.Game_onKeyDown_anon = {"": "Closure;this_0",
  call$1: function(timer) {
    return this.this_0.slideLeft$0();
  }
};

$$.Game_onKeyDown_anon0 = {"": "Closure;this_1",
  call$1: function(timer) {
    return this.this_1.slideRight$0();
  }
};

$$.Game_onKeyDown_anon1 = {"": "Closure;this_2",
  call$1: function(timer) {
    return this.this_2.slideDown$0();
  }
};

$$.Game_fall_anon = {"": "Closure;this_0",
  call$1: function(timer) {
    return this.this_0.play$0();
  }
};

$$.Game_slideDown_anon = {"": "Closure;this_0",
  call$1: function(timer) {
    return this.this_0.slideDown$0();
  }
};

$$.Game_slideRight_anon = {"": "Closure;this_0",
  call$1: function(timer) {
    return this.this_0.slideRight$0();
  }
};

$$.Game_slideLeft_anon = {"": "Closure;this_0",
  call$1: function(timer) {
    return this.this_0.slideLeft$0();
  }
};

$$.IsolateNatives__processWorkerMessage_function = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  }
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1, t2;
    this.port_1.close$0();
    t1 = typeof value === "object" && value !== null && !!value.is$Exception;
    t2 = this.completer_0;
    if (t1)
      t2.completeError$1(value);
    else
      t2.complete$1(value);
  }
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.get$isWorker() === true)
      $globalState.get$mainManager().postMessage$1(workerMessage);
    else {
      t2 = $globalState.get$managers();
      t1 = t1.get$_workerId();
      manager = $.getInterceptor$JSStringJSArray(t2).operator$index$1(t2, t1);
      if (!(manager == null))
        manager.postMessage$1(workerMessage);
    }
  }
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,completer_1,values_2,pos_3",
  call$1: function(value) {
    var t1, t2, t3, remaining;
    t1 = this.values_2;
    t2 = this.pos_3;
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, t2, value);
    t2 = this.box_0;
    t3 = t2.remaining_0;
    remaining = $.getInterceptor$JSNumber(t3).operator$sub$1(t3, 1);
    t2.remaining_0 = remaining;
    if ($.eqB(remaining, 0))
      this.completer_1.complete$1(t1);
  }
};

$$._FutureImpl__FutureImpl$wait_anon0 = {"": "Closure;box_0,completer_4",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.completed_1 !== true)
      this.completer_4.completeError$2(error.get$error(), error.get$stackTrace());
    t1.completed_1 = true;
  }
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$1: function(_) {
    this.errorFuture_1._sendError$1(this.error_0);
  }
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$1: function(_) {
    this.thenFuture_0._sendValue$1(this.value_1);
  }
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$1: function(_) {
    var t1, error;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError() === true) {
      t1._clearUnhandledError$0();
      error = t1.get$_resultOrListeners();
      $.print("Uncaught Error: " + $.S(error.get$error()));
      t1 = error.get$stackTrace();
      if (!(t1 == null))
        $.print("Stack Trace:\n" + $.S(t1) + "\n");
      throw $.$$throw(error.get$error());
    }
  }
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$.Storage_values_anon = {"": "Closure;values_0",
  call$2: function(k, v) {
    var t1 = this.values_0;
    return $.getInterceptor$JSArray(t1).add$1(t1, v);
  }
};

$$._LinkedHashMapImpl_values_anon = {"": "Closure;",
  call$1: function(entry) {
    return entry.get$value();
  }
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, t5, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.get$isolates();
    t5 = t2.get$_isolateId();
    isolate = $.getInterceptor$JSStringJSArray(t4).operator$index$1(t4, t5);
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = !($globalState.get$currentContext() == null) && !$.eqB($globalState.get$currentContext().get$id(), t2.get$_isolateId());
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  }
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (!(t1.get$_receivePort().get$_callback() == null)) {
      if (this.shouldSerialize_5 === true) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_receivePort();
      t2 = this.box_0;
      t1._callback$2(t2.msg_0, t2.reply_1);
    }
  }
};

$$.Storage_keys_anon = {"": "Closure;keys_0",
  call$2: function(k, v) {
    var t1 = this.keys_0;
    return $.getInterceptor$JSArray(t1).add$1(t1, k);
  }
};

$$._LinkedHashMapImpl_keys_anon = {"": "Closure;",
  call$1: function(entry) {
    return entry.get$key();
  }
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2, t3;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    t3 = t2._dispatch$1(key);
    t2 = t2._dispatch$1(val);
    $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, t3, t2);
  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (this.this_0.runIteration$0() !== true)
      return;
    $.Timer_Timer(0, new $._EventLoop__runHelper_next_anon(this));
  }
};

$$._EventLoop__runHelper_next_anon = {"": "Closure;next_1",
  call$1: function(_) {
    return this.next_1.call$0();
  }
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  }
};

$$.BoundClosure = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};
$$.BoundClosure0 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};
$.Strings__toJsStringArray = function(strings) {
  var length$, i, string;
  if (typeof strings !== "object" || strings === null || (strings.constructor !== Array || !!strings.immutable$list) && !strings.is$JavaScriptIndexingBehavior())
    return $.Strings__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  if (!strings.constructor === Array)
    strings = $.List_List$from(strings);
  length$ = strings.length;
  for (i = 0; i < length$; ++i) {
    if (i >= strings.length)
      throw $.ioore(i);
    string = strings[i];
    if (!(typeof string === "string"))
      throw $.$$throw($.ArgumentError$(string));
  }
  return strings;
};

$.Strings__toJsStringArray$bailout = function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      strings = env0;
      break;
    case 2:
      length$ = env2;
      t1 = env1;
      strings = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.checkNull(strings);
      if (!(!(strings == null) && strings.constructor === Array))
        strings = $.List_List$from(strings);
      t1 = $.getInterceptor$JSStringJSArray(strings);
      length$ = t1.get$length(strings);
    case 2:
      var strings, t1, length$, i, string;
      state0 = 0;
      for (i = 0; $.ltB(i, length$); ++i) {
        string = t1.operator$index$1(strings, i);
        if (!(typeof string === "string"))
          throw $.$$throw($.ArgumentError$(string));
      }
      return strings;
  }
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $globalState.get$topEventLoop().run$0();
};

$._currentIsolate = function() {
  return $globalState.get$currentContext();
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.get$isWorker() === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.set$rootContext(rootContext);
  $globalState.set$currentContext(rootContext);
  rootContext.eval$1(entry);
  $globalState.get$topEventLoop().run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue(), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var t1, t2, src;
  for (t1 = $.CONSTANT0.get$iterator(document.getElementsByTagName('script')); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    src = t2 && t2.src;
    if (!(src == null)) {
      t2 = $.getInterceptor$JSString(src);
      t2 = t2.endsWith$1(src, "test_controller.js") !== true && t2.endsWith$1(src, "dart.js") !== true;
    } else
      t2 = false;
    if (t2)
      return src;
  }
  return;
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, t2, entryPoint, replyTo, context;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$JSStringJSArray(msg);
  switch (t1.operator$index$1(msg, "command")) {
    case "start":
      t2 = t1.operator$index$1(msg, "id");
      $globalState.set$currentManagerId(t2);
      entryPoint = $[t1.operator$index$1(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.operator$index$1(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.get$topEventLoop().enqueue$3(context, new $.IsolateNatives__processWorkerMessage_function(entryPoint, replyTo), "worker-start");
      $globalState.set$currentContext(context);
      $globalState.get$topEventLoop().run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.operator$index$1(msg, "functionName"), t1.operator$index$1(msg, "uri"), t1.operator$index$1(msg, "replyPort"));
      break;
    case "message":
      if (!(t1.operator$index$1(msg, "port") == null))
        t1.operator$index$1(msg, "port").send$2(t1.operator$index$1(msg, "msg"), t1.operator$index$1(msg, "replyTo"));
      $globalState.get$topEventLoop().run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      t1 = $globalState.get$managers();
      t2 = sender.get$id();
      $.getInterceptor$JSArray(t1).remove$1(t1, t2);
      sender.terminate$0();
      $globalState.get$topEventLoop().run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.operator$index$1(msg, "msg"));
      break;
    case "print":
      if ($globalState.get$isWorker() === true)
        $globalState.get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      else
        $.print(t1.operator$index$1(msg, "msg"));
      break;
    case "error":
      throw $.$$throw(t1.operator$index$1(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, exception;
  if ($globalState.get$isWorker() === true)
    $globalState.get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  else
    try {
      t1 = msg;
      $.get$globalThis().console.log(t1);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($.Exception_Exception(trace));
    }

};

$.IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $.lazyPort = $.ReceivePort_ReceivePort();
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  replyTo.send$2("spawned", $.lazyPort.toSendPort$0());
  topLevel.call$0();
};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.set$onmessage(function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t1 = $globalState;
  workerId = t1.get$nextManagerId();
  t1.set$nextManagerId($.getInterceptor$JSNumber(workerId).operator$add$1(workerId, 1));
  worker.set$id(workerId);
  t1 = $globalState.get$managers();
  $.getInterceptor$JSArray(t1).operator$indexSet$2(t1, workerId, worker);
  worker.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return !($.get$globalThis().setTimeout == null);
};

$._ArrayIterator$ = function(_list) {
  return new $._ArrayIterator(_list, -1, null);
};

$.gtB = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === "number" && typeof b === "number" ? a < b : $.lt$slow(a, b) === true;
};

$.checkNumbers = function(a, b) {
  if (typeof a === "number")
    if (typeof b === "number")
      return true;
    else
      throw $.$$throw($.ArgumentError$(b));
  return false;
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.getInterceptor(value).toString$0(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash, t1;
  hash = object.$identityHash;
  if (hash == null) {
    t1 = $.Primitives_hashCodeSeed;
    hash = $.getInterceptor$JSNumber(t1).operator$add$1(t1, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives__throwFormatException = function(string) {
  throw $.$$throw($.FormatException$(string));
};

$.Primitives_parseInt = function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i;
  if (handleError == null)
    handleError = $.Primitives__throwFormatException;
  $.checkString(source);
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    if (!(match == null)) {
      t1 = $.getInterceptor$JSStringJSArray(match);
      if (!(t1.operator$index$1(match, 2) == null))
        return parseInt(source, 16);
      if (!(t1.operator$index$1(match, 3) == null))
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    radix = 10;
  } else {
    if (!(typeof radix === "number" && Math.floor(radix) === radix))
      throw $.$$throw($.ArgumentError$("Radix is not an integer"));
    if (radix < 2 || radix > 36)
      throw $.$$throw($.RangeError$("Radix " + $.S(radix) + " not in range 2..36"));
    if (!(match == null)) {
      if (radix === 10 && !($.getInterceptor$JSStringJSArray(match).operator$index$1(match, 3) == null))
        return parseInt(source, 10);
      if (radix < 10 || $.getInterceptor$JSStringJSArray(match).operator$index$1(match, 3) == null) {
        maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
        t1 = $.getInterceptor$JSStringJSArray(match).operator$index$1(match, 1);
        digitsPart = $.getInterceptor$JSString(t1).toLowerCase$0(t1);
        for (t1 = $.getInterceptor$JSStringJSArray(digitsPart), i = 0; $.ltB(i, t1.get$length(digitsPart)); ++i)
          if ($.gtB(t1.charCodeAt$1(digitsPart, i), maxCharCode))
            return handleError.call$1(source);
      }
    }
    radix = radix;
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled, t1;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      name$ = decompiled;
  }
  t1 = $.getInterceptor$JSString(name$);
  return t1.charCodeAt$1(name$, 0) === 36 ? t1.substring$1(name$, 1) : name$;
};

$.Primitives_newFixedList = function(length$) {
  var result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  var t1 = this;
  return $.getInterceptor(t1).toString$0(t1);
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") !== -1 || $.eqB(type, "property_not_function") || $.eqB(type, "called_non_callable") || $.eqB(type, "non_object_property_call") || $.eqB(type, "non_object_property_load"))
      return $.NoSuchMethodError$(null, name$, [], $.makeLiteralMap([]), null);
    else if ($.eqB(type, "undefined_method"))
      return $.NoSuchMethodError$("", name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === "string")
      if ($.CONSTANT1.endsWith$1(message, "is null") === true || $.CONSTANT1.endsWith$1(message, "is undefined") === true || $.CONSTANT1.endsWith$1(message, "is null or undefined") === true || $.CONSTANT1.endsWith$1(message, "of undefined") === true || $.CONSTANT1.endsWith$1(message, "of null") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(typeof message === "string" ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, t1, key;
  iterator = $.CONSTANT0.get$iterator(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (t1 = $.getInterceptor$JSArray(result); iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    t1.operator$indexSet$2(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  $._currentIsolate();
  function$ = function($0, $1) { return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, $0, $1); };
  closure.$identity = function$;
  return function$;
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var name$ = tag;
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "WebKitMutationObserver")
    return "MutationObserver";
  if (name$ === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name$ === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name$ === "AudioGainNode")
    return "GainNode";
  if (name$ === "AudioPannerNode")
    return "PannerNode";
  if (name$ === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name$ === "Oscillator")
    return "OscillatorNode";
  if (name$ === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name$;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  return name$;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CSS2Properties")
    return "CSSStyleDeclaration";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "GeoGeolocation")
    return "Geolocation";
  if (name$ === "MouseScrollEvent")
    return "WheelEvent";
  if (name$ === "OfflineResourceList")
    return "DOMApplicationCache";
  if (name$ === "WorkerMessageEvent")
    return "MessageEvent";
  if (name$ === "XMLDocument")
    return "Document";
  return name$;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "HTMLDDElement")
    return "HTMLElement";
  if (name$ === "HTMLDTElement")
    return "HTMLElement";
  if (name$ === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLPhraseElement")
    return "HTMLElement";
  if (name$ === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if (name$ === "MouseWheelEvent")
    return "WheelEvent";
  if (name$ === "Position")
    return "Geoposition";
  if (name$ === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return name$;
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return "Null";
  constructor$ = object.constructor;
  if (typeof(constructor$) === "function") {
    name$ = constructor$.name;
    if (typeof name$ === "string")
      t1 = !(name$ === "") && !(name$ === "Object") && !(name$ === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function(function$, object, property) {
  return function$.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, hasOwnPropertyFunction, method, secondTag, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
  if (method == null) {
    secondTag = $.alternateTag(obj, tag);
    if (!(secondTag == null))
      method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
  }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT5));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT5)[name$];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined") {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global) {
  var pattern, sb, e, isMultiLine, isCaseSensitive, t1, t2, exception;
  pattern = regExp.get$pattern();
  isMultiLine = regExp.get$isMultiLine();
  isCaseSensitive = regExp.get$isCaseSensitive();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer("");
  if (isMultiLine === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "m");
  }
  if (isCaseSensitive !== true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "i");
  }
  if (global === true) {
    t1 = sb;
    $.getInterceptor$JSArray(t1).add$1(t1, "g");
  }
  try {
    t1 = pattern;
    t2 = sb;
    t1 = new RegExp(t1, $.getInterceptor(t2).toString$0(t2));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive);
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, t1, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer_StringBuffer("");
      length$ = receiver.length;
      t1 = $.getInterceptor$JSArray(result);
      t1.add$1(result, to);
      for (i = 0; i < length$; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        t1.add$1(result, receiver[i]);
        t1.add$1(result, to);
      }
      return t1.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), true, false), true), to);
};

$.AsyncError$ = function(error, stackTrace) {
  return new $.AsyncError(error, stackTrace, null);
};

$.AsyncError$withCause = function(error, stackTrace, cause) {
  return new $.AsyncError(error, stackTrace, cause);
};

$.Future_Future$immediate = function(value) {
  return $._FutureImpl$immediate(value);
};

$.Completer_Completer = function() {
  return $._CompleterImpl$();
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$(), false);
};

$._FutureListener__FutureListener$wrap = function(future) {
  return $._FutureListenerWrapper$(future);
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(0, null);
};

$._FutureImpl$immediate = function(value) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediate$1(value);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures) {
  var t1, t2, completer, values, i, t3, i0;
  t1 = {};
  t2 = $.getInterceptor$JSStringJSArray(futures);
  if (t2.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CONSTANT6);
  completer = $.Completer_Completer();
  t1.remaining_0 = t2.get$length(futures);
  values = $.List_List$fixedLength(t2.get$length(futures), null);
  t1.completed_1 = false;
  for (t2 = t2.get$iterator(futures), i = 0; t2.moveNext$0() === true; i = i0) {
    t3 = t2.get$current();
    i0 = i + 1;
    t3.then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, completer, values, i)).catchError$1(new $._FutureImpl__FutureImpl$wait_anon0(t1, completer));
  }
  return completer.get$future();
};

$._ThenFuture$ = function(_onValue) {
  return new $._ThenFuture(_onValue, null, 0, null);
};

$._CatchErrorFuture$ = function(_onError, _test) {
  return new $._CatchErrorFuture(_test, _onError, null, 0, null);
};

$._SubscribeFuture$ = function(onValue, _onError) {
  return new $._SubscribeFuture(_onError, onValue, null, 0, null);
};

$._FutureWrapper$ = function(_future) {
  return new $._FutureWrapper(_future);
};

$.Timer_Timer = function(milliseconds, callback) {
  return $.TimerImpl$(milliseconds, callback);
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.IterableMixinWorkaround_joinList = function(list, separator) {
  var t1, buffer, i, t2;
  if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return $.IterableMixinWorkaround_joinList$bailout(1, list, separator);
  if (typeof separator !== "string")
    return $.IterableMixinWorkaround_joinList$bailout(1, list, separator);
  if ($.getInterceptor$JSStringJSArray(list).get$isEmpty(list) === true)
    return "";
  t1 = list.length;
  if (t1 === 1) {
    if (0 >= t1)
      throw $.ioore(0);
    return $.S(list[0]);
  }
  buffer = $.StringBuffer_StringBuffer("");
  if (separator === "")
    for (t1 = $.getInterceptor$JSArray(buffer), i = 0; i < list.length; ++i)
      t1.add$1(buffer, $.S(list[i]));
  else {
    if (0 >= list.length)
      throw $.ioore(0);
    t1 = $.S(list[0]);
    t2 = $.getInterceptor$JSArray(buffer);
    t2.add$1(buffer, t1);
    for (i = 1; i < list.length; ++i) {
      t2.add$1(buffer, separator);
      if (i >= list.length)
        throw $.ioore(i);
      t2.add$1(buffer, $.S(list[i]));
    }
  }
  return $.getInterceptor(buffer).toString$0(buffer);
};

$.IterableMixinWorkaround_joinList$bailout = function(state0, list, separator) {
  var t1, buffer, t2, i, t3;
  t1 = $.getInterceptor$JSStringJSArray(list);
  if (t1.get$isEmpty(list) === true)
    return "";
  if ($.eqB(t1.get$length(list), 1))
    return $.S(t1.operator$index$1(list, 0));
  buffer = $.StringBuffer_StringBuffer("");
  if (separator == null || $.eqB(separator, ""))
    for (t2 = $.getInterceptor$JSArray(buffer), i = 0; $.ltB(i, t1.get$length(list)); ++i)
      t2.add$1(buffer, $.S(t1.operator$index$1(list, i)));
  else {
    t2 = $.S(t1.operator$index$1(list, 0));
    t3 = $.getInterceptor$JSArray(buffer);
    t3.add$1(buffer, t2);
    for (i = 1; $.ltB(i, t1.get$length(list)); ++i) {
      t3.add$1(buffer, separator);
      t3.add$1(buffer, $.S(t1.operator$index$1(list, i)));
    }
  }
  return $.getInterceptor(buffer).toString$0(buffer);
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer("");
  $.Collections__emitCollection(c, result, $.List_List(0));
  return $.getInterceptor(result).toString$0(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.is$List());
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, t2);
  for (t2 = $.getInterceptor$JSArray(c).get$iterator(c), first = true; t2.moveNext$0() === true; first = false) {
    t4 = t2.get$current();
    if (!first)
      t3.add$1(result, ", ");
    $.Collections__emitObject(t4, result, visiting);
  }
  t3.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  var t1;
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o)) {
      t1 = typeof o === "object" && o !== null && (o.constructor === Array || o.is$List()) ? "[...]" : "{...}";
      $.getInterceptor$JSArray(result).add$1(result, t1);
    } else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.getInterceptor$JSArray(result).add$1(result, "{...}");
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.getInterceptor$JSArray(result).add$1(result, o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.getInterceptor$JSArray(c).get$iterator(c); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer("");
  $.Maps__emitMap(m, result, $.List_List(0));
  return $.getInterceptor(result).toString$0(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  t1 = new $.Maps__emitMap_anon(t1, result, visiting);
  $.getInterceptor$JSArray(m).forEach$1(m, t1);
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$.MappedIterable$ = function(_iterable, _f) {
  return new $.MappedIterable(_iterable, _f);
};

$.MappedIterator$ = function(_iterator, _f) {
  return new $.MappedIterator(null, _iterator, _f);
};

$.WhereIterable$ = function(_iterable, _f) {
  return new $.WhereIterable(_iterable, _f);
};

$.WhereIterator$ = function(_iterator, _f) {
  return new $.WhereIterator(_iterator, _f);
};

$.ListIterator$ = function(_list) {
  return new $.ListIterator(_list, -1, null);
};

$.ListView$ = function(list, _offset, _length) {
  var t1 = new $.ListView(list, _offset, _length);
  t1.ListView$3(list, _offset, _length);
  return t1;
};

$.Error_safeToString = function(object) {
  var t1;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.getInterceptor(object).toString$0(object);
  if (typeof object === "string") {
    t1 = $.CONSTANT1.replaceAll$2(object, "\\", "\\\\");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\n", "\\n");
    t1 = $.getInterceptor$JSString(t1).replaceAll$2(t1, "\r", "\\r");
    return "\"" + $.S($.getInterceptor$JSString(t1).replaceAll$2(t1, "\"", "\\\"")) + "\"";
  }
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.int_parse = function(source, onError, radix) {
  return $.Primitives_parseInt(source, radix, onError);
};

$.List_List = function(length$) {
  if (!(typeof length$ === "number" && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S(length$) + "."));
  return new Array(length$);
};

$.List_List$fixedLength = function(length$, fill) {
  var result, t1, i;
  if (!(typeof length$ === "number" && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S(length$) + "."));
  result = $.Primitives_newFixedList(length$);
  if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !result.is$JavaScriptIndexingBehavior())
    return $.List_List$fixedLength$bailout(1, length$, fill, result);
  if (!$.eqB(length$, 0) && !(fill == null))
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
};

$.List_List$fixedLength$bailout = function(state0, length$, fill, result) {
  var i;
  if (!$.eqB(length$, 0) && !(fill == null))
    for (i = 0; i < result.length; ++i)
      $.CONSTANT0.operator$indexSet$2(result, i, fill);
  return result;
};

$.List_List$from = function(other) {
  var list, t1;
  list = $.List_List(0);
  for (t1 = $.getInterceptor$JSArray(other).get$iterator(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  return list;
};

$.Map_Map = function() {
  return $._HashMapImpl$();
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$.LinkedHashMap_LinkedHashMap = function() {
  return $._LinkedHashMapImpl$();
};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.CONSTANT2.operator$tdiv$1(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  var t1, t2;
  t1 = $.getInterceptor$JSNumber(currentProbe).operator$add$1(currentProbe, numberOfProbes);
  t2 = $.getInterceptor$JSNumber(length$).operator$sub$1(length$, 1);
  return $.getInterceptor$JSNumber(t1).operator$and$1(t1, t2);
};

$._HashMapImplKeyIterable$ = function(_map) {
  return new $._HashMapImplKeyIterable(_map);
};

$._HashMapImplValueIterable$ = function(_map) {
  return new $._HashMapImplValueIterable(_map);
};

$._HashMapImplKeyIterator$ = function(map) {
  return new $._HashMapImplKeyIterator(map, -1, null);
};

$._HashMapImplValueIterator$ = function(map) {
  return new $._HashMapImplValueIterator(map, -1, null);
};

$._HashMapImplIndexIterator$ = function(map) {
  return new $._HashMapImplIndexIterator(map, -1, null);
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.print = function(object) {
  if (typeof object === "string")
    $.Primitives_printString(object);
  else
    $.Primitives_printString($.getInterceptor(object).toString$0(object));
};

$.Queue_Queue = function() {
  return $.DoubleLinkedQueue$();
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._DoubleLinkedQueueIterator$ = function(sentinel) {
  return new $._DoubleLinkedQueueIterator(sentinel, sentinel, null);
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.Set_Set = function() {
  return $.HashSet$();
};

$.HashSet$ = function() {
  return new $.HashSet($._HashMapImpl$());
};

$._HashSetIterator$ = function(set) {
  return new $._HashSetIterator($.CONSTANT0.get$iterator(set._backingMap._keys));
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.Strings_join = function(strings, separator) {
  $.checkNull(strings);
  return $.Strings__toJsStringArray(strings).join(separator);
};

$.document = function() {
  return document;
};

$.BodyElementEvents$ = function(_ptr) {
  return new $.BodyElementEvents(_ptr);
};

$.DocumentEvents$ = function(_ptr) {
  return new $.DocumentEvents(_ptr);
};

$._FrozenCssClassSet$ = function() {
  return new $._FrozenCssClassSet();
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$._ElementCssClassSet$ = function(_element) {
  return new $._ElementCssClassSet(_element);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$.ElementEvents$ = function(_ptr) {
  return new $.ElementEvents(_ptr);
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList(_ptr, _type);
};

$.InputElementEvents$ = function(_ptr) {
  return new $.InputElementEvents(_ptr);
};

$.MediaElementEvents$ = function(_ptr) {
  return new $.MediaElementEvents(_ptr);
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.WindowEvents$ = function(_ptr) {
  return new $.WindowEvents(_ptr);
};

$._FrameSetElementEvents$ = function(_ptr) {
  return new $._FrameSetElementEvents(_ptr);
};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.getInterceptor$JSStringJSArray(array).get$length(array), -1, null);
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, i;
  t1 = $.getInterceptor$JSStringJSArray(a);
  if ($.geB(startIndex, t1.get$length(a)))
    return -1;
  if ($.ltB(startIndex, 0))
    startIndex = 0;
  for (i = startIndex; $.ltB(i, endIndex); i = $.getInterceptor$JSNumber(i).operator$add$1(i, 1))
    if ($.eqB(t1.operator$index$1(a, i), element))
      return i;
  return -1;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$.Random_Random = function(seed) {
  return $.CONSTANT4;
};

$._AttributeClassSet$ = function(_element) {
  return new $._AttributeClassSet(_element);
};

$.Game$ = function() {
  var t1 = new $.Game(1, 1, 1, null, 15, false, false, false, false, null, 0, 640, null, null, null, null, null, null, null, null, null, null, $.Random_Random(null), false, false, false, false, false, null, null, null);
  t1.Game$0();
  return t1;
};

$.main = function() {
  $.Game$().run$0();
};

$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.Primitives__throwFormatException.call$1 = $.Primitives__throwFormatException;
$.Primitives__throwFormatException.$name = "Primitives__throwFormatException";
Isolate.$finishClasses($$);
$$ = {};
$.List = {builtin$cls: 'List'};
$.String = {builtin$cls: 'String'};
$.Node = {builtin$cls: 'Node'};
$._ManagerStub = {builtin$cls: '_ManagerStub'};
$.$int = {builtin$cls: '$int'};
$.Element = {builtin$cls: 'Element'};
$.ReceivePort = {builtin$cls: 'ReceivePort'};
$.CONSTANT2 = new Isolate.$isolateProperties.JSInt();
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT6 = Isolate.makeConstantList([]);
$.CONSTANT1 = new Isolate.$isolateProperties.JSString();
$.CONSTANT = new Isolate.$isolateProperties.NullThrownError();
$.CONSTANT4 = new Isolate.$isolateProperties._Random();
$.CONSTANT3 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CONSTANT0 = new Isolate.$isolateProperties.JSArray();
$.CONSTANT5 = new Isolate.$isolateProperties.Object();
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$.lazyPort = null;
$._getTypeNameOf = null;
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CONSTANT3;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$._SPAWNED_SIGNAL = "spawned";
$._FutureImpl__INCOMPLETE = 0;
$._FutureImpl__VALUE = 1;
$._FutureImpl__ERROR = 2;
$._FutureImpl__UNHANDLED_ERROR = 4;
$.getInterceptor$JSStringJSArray = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumber = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, 'thisScript', 'IsolateNatives_thisScript', 'get$IsolateNatives_thisScript', function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, 'quoteRegExp', 'quoteRegExp', 'get$quoteRegExp', function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", true, false);
});
Isolate.$lazy($, 'globalThis', 'globalThis', 'get$globalThis', function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, 'globalWindow', 'globalWindow', 'get$globalWindow', function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, 'globalWorker', 'globalWorker', 'get$globalWorker', function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, 'globalPostMessageDefined', 'globalPostMessageDefined', 'get$globalPostMessageDefined', function() {
  return $.get$globalThis().postMessage !== (void 0);
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {        if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  is$JavaScriptIndexingBehavior: function() {
    return false;
  },
  is$Collection: function() {
    return false;
  },
  is$List: function() {
    return false;
  },
  is$Map: function() {
    return false;
  },
  is$Element: function() {
    return false;
  },
  is$Node: function() {
    return false;
  },
  is$OptionElement: function() {
    return false;
  },
  toString$0: function() {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function() {
    return $.hashCodeForNativeObject(this);
  }
});

$.$defineNativeClass("Worker", {
  get$id: function() {
    return this.id;
  },
  set$id: function(i) {
    this.id = i;
  },
  set$onmessage: function(f) {
    this.onmessage = f;
  },
  postMessage$1: function(msg) {
    this.postMessage(msg);
  },
  terminate$0: function() {
    this.terminate();
  }
});

$.$defineNativeClass("HTMLAnchorElement", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLBodyElement", {
  get$on: function() {
    return $.BodyElementEvents$(this);
  }
});

$.$defineNativeClass("HTMLButtonElement", {"": "value="});

$.$defineNativeClass("HTMLCanvasElement", {"": "height<,width<"});

$.$defineNativeClass("CharacterData", {"": "length>",
  remove$0: function() {
    return this.remove();
  }
});

$.$defineNativeClass("CSSStyleDeclaration", {"": "length>",
  _getPropertyValue$1: function(propertyName) {
    return this.getPropertyValue(propertyName);
  },
  getPropertyValue$1: function(propertyName) {
    var propValue = this._getPropertyValue$1(propertyName);
    return !(propValue == null) ? propValue : "";
  },
  setProperty$3: function(propertyName, value, priority) {
    this.setProperty(propertyName, value, priority);
    if (!!this.setAttribute)
      this.setAttribute(propertyName, value);
  },
  get$clear: function() {
    return this.getPropertyValue$1("clear");
  },
  clear$0: function() {
    return this.get$clear().call$0();
  },
  set$height: function(value) {
    this.setProperty$3("height", value, "");
  },
  get$src: function() {
    return this.getPropertyValue$1("src");
  },
  set$src: function(value) {
    this.setProperty$3("src", value, "");
  },
  set$width: function(value) {
    this.setProperty$3("width", value, "");
  }
});

$.$defineNativeClass("HTMLDataListElement", {"": "options>"});

$.$defineNativeClass("Document", {
  get$on: function() {
    return $.DocumentEvents$(this);
  },
  $$dom_getElementById$1: function(elementId) {
    return this.getElementById(elementId);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  query$1: function(selectors) {
    if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", true, false).hasMatch$1(selectors) === true)
      return this.$$dom_getElementById$1($.CONSTANT1.substring$1(selectors, 1));
    return this.$$dom_querySelector$1(selectors);
  }
});

$.$defineNativeClass("DocumentFragment", {
  query$1: function(selectors) {
    return this.$$dom_querySelector$1(selectors);
  },
  get$id: function() {
    return "";
  },
  get$classes: function() {
    return $._FrozenCssClassSet$();
  },
  blur$0: function() {
  },
  click$0: function() {
  },
  get$click: function() {
    return new $.BoundClosure0(this, "click$0");
  },
  set$id: function(value) {
    throw $.$$throw($.UnsupportedError$("ID can't be set for document fragments."));
  },
  get$on: function() {
    return $.ElementEvents$(this);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  }
});

$.$defineNativeClass("DOMException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("Element", {"": "$$dom_children:children~,id=,$$dom_className:className},$$dom_firstElementChild:firstElementChild~,$$dom_lastElementChild:lastElementChild~",
  get$attributes: function() {
    return $._ElementAttributeMap$(this);
  },
  get$children: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$children")) {
      return $._ChildrenElementList$_wrap(this);
    } else
      return Object.prototype.get$children.call(this);
  },
  query$1: function(selectors) {
    return this.$$dom_querySelector$1(selectors);
  },
  get$classes: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$classes")) {
      return $._ElementCssClassSet$(this);
    } else
      return Object.prototype.get$classes.call(this);
  },
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.ElementEvents$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  click$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("click$0")) {
      return this.click();
    } else
      return Object.prototype.click$0.call(this);
  },
  get$click: function() {
    return new $.BoundClosure0(this, "click$0");
  },
  blur$0: function() {
    return this.blur();
  },
  $$dom_getAttribute$1: function(name$) {
    return this.getAttribute(name$);
  },
  $$dom_hasAttribute$1: function(name$) {
    return this.hasAttribute(name$);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  $$dom_removeAttribute$1: function(name$) {
    return this.removeAttribute(name$);
  },
  $$dom_setAttribute$2: function(name$, value) {
    return this.setAttribute(name$,value);
  },
  is$Element: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLEmbedElement", {"": "height<,src=,width<"});

$.$defineNativeClass("Event", {
  preventDefault$0: function() {
    return this.preventDefault();
  }
});

$.$defineNativeClass("EventException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("EventTarget", {
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.Events$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_addEventListener$3")) {
      return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_removeEventListener$3")) {
      return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }
});

$.$defineNativeClass("FileException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length>",
  reset$0: function() {
    return this.reset();
  }
});

$.$defineNativeClass("History", {"": "length>",
  back$0: function() {
    return this.back();
  }
});

$.$defineNativeClass("HTMLCollection", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("XMLHttpRequestException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLIFrameElement", {"": "height<,src=,width<"});

$.$defineNativeClass("HTMLImageElement", {"": "height<,src=,width<",
  complete$1: function(arg0) {
    return this.complete.call$1(arg0);
  }
});

$.$defineNativeClass("HTMLInputElement", {"": "height<,pattern>,src=,value=,width<",
  get$on: function() {
    return $.InputElementEvents$(this);
  },
  is$Element: function() {
    return true;
  },
  is$Node: function() {
    return true;
  }
});

$.$defineNativeClass("KeyboardEvent", {
  get$keyCode: function() {
    return this.keyCode;
  }
});

$.$defineNativeClass("HTMLLIElement", {"": "value="});

$.$defineNativeClass("HTMLMediaElement", {"": "error>,src=",
  get$on: function() {
    return $.MediaElementEvents$(this);
  },
  pause$0: function() {
    return this.pause();
  },
  play$0: function() {
    return this.play();
  }
});

$.$defineNativeClass("MessageEvent", {"": "ports>"});

$.$defineNativeClass("HTMLMeterElement", {"": "value="});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Node", {"": "$$dom_attributes:attributes~,$$dom_childNodes:childNodes~,$$dom_localName:localName~,$$dom_namespaceUri:namespaceURI~,text:textContent|",
  get$nodes: function() {
    return $._ChildNodeListLazy$(this);
  },
  remove$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$0")) {
      var t1 = this.parentNode;
      if (!(t1 == null))
        t1.$$dom_removeChild$1(this);
    } else
      return Object.prototype.remove$0.call(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_appendChild$1: function(newChild) {
    return this.appendChild(newChild);
  },
  $$dom_removeChild$1: function(oldChild) {
    return this.removeChild(oldChild);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_replaceChild$2: function(newChild, oldChild) {
    return this.replaceChild(newChild,oldChild);
  },
  is$Node: function() {
    return true;
  }
});

$.$defineNativeClass("NodeList", {
  get$length: function() {
    return this.length;
  },
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLOListElement", {
  start$0: function() {
    return this.start.call$0();
  }
});

$.$defineNativeClass("HTMLObjectElement", {"": "height<,width<"});

$.$defineNativeClass("HTMLOptionElement", {"": "value=",
  is$OptionElement: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLOutputElement", {"": "value="});

$.$defineNativeClass("HTMLParamElement", {"": "value="});

$.$defineNativeClass("HTMLProgressElement", {"": "value="});

$.$defineNativeClass("RadioNodeList", {"": "value="});

$.$defineNativeClass("RangeException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLScriptElement", {"": "src="});

$.$defineNativeClass("HTMLSelectElement", {"": "length=,selectedIndex=,value=",
  get$options: function() {
    var t1, t2, options;
    t1 = this.get$children();
    t2 = new $.SelectElement_options_anon();
    t2 = $.getInterceptor$JSArray(t1).where$1(t1, t2);
    options = $.getInterceptor$JSArray(t2).toList$0(t2);
    return $.ListView$(options, 0, $.getInterceptor$JSStringJSArray(options).get$length(options));
  }
});

$.$defineNativeClass("HTMLSourceElement", {"": "src="});

$.$defineNativeClass("SpeechRecognitionError", {"": "error>"});

$.$defineNativeClass("Storage", {
  containsKey$1: function(key) {
    return !(this.$$dom_getItem$1(key) == null);
  },
  operator$index$1: function(key) {
    return this.$$dom_getItem$1(key);
  },
  operator$indexSet$2: function(key, value) {
    this.$$dom_setItem$2(key, value);
  },
  remove$1: function(key) {
    var value = this.operator$index$1(key);
    this.$$dom_removeItem$1(key);
    return value;
  },
  clear$0: function() {
    return this.$$dom_clear$0();
  },
  forEach$1: function(f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = this.$$dom_key$1(i);
      if (key == null)
        return;
      f.call$2(key, this.operator$index$1(key));
    }
  },
  get$keys: function() {
    var keys = [];
    this.forEach$1(new $.Storage_keys_anon(keys));
    return keys;
  },
  get$values: function() {
    var values = [];
    this.forEach$1(new $.Storage_values_anon(values));
    return values;
  },
  get$length: function() {
    return this.length;
  },
  get$isEmpty: function() {
    return this.$$dom_key$1(0) == null;
  },
  $$dom_clear$0: function() {
    return this.clear();
  },
  $$dom_getItem$1: function(key) {
    return this.getItem(key);
  },
  $$dom_key$1: function(index) {
    return this.key(index);
  },
  $$dom_removeItem$1: function(key) {
    return this.removeItem(key);
  },
  $$dom_setItem$2: function(key, data) {
    return this.setItem(key,data);
  },
  is$Map: function() {
    return true;
  }
});

$.$defineNativeClass("StorageEvent", {"": "key>"});

$.$defineNativeClass("HTMLTextAreaElement", {"": "value="});

$.$defineNativeClass("HTMLTrackElement", {"": "src="});

$.$defineNativeClass("Uint8Array", {
  get$length: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$length")) {
      return this.length;
    } else
      return Object.prototype.get$length.call(this);
  },
  operator$index$1: function(index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("operator$index$1")) {
      return this[index];
    } else
      return Object.prototype.operator$index$1.call(this, index);
  },
  operator$indexSet$2: function(index, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("operator$indexSet$2")) {
      this[index] = value;
    } else
      return Object.prototype.operator$indexSet$2.call(this, index, value);
  },
  get$iterator: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$iterator")) {
      return $.FixedSizeListIterator$(this);
    } else
      return Object.prototype.get$iterator.call(this);
  },
  forEach$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("forEach$1")) {
      var t1;
      for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
        f.call$1(t1.get$current());
      return;
    } else
      return Object.prototype.forEach$1.call(this, f);
  },
  join$1: function(separator) {
    if (Object.getPrototypeOf(this).hasOwnProperty("join$1")) {
      return $.IterableMixinWorkaround_joinList(this, separator);
    } else
      return Object.prototype.join$1.call(this, separator);
  },
  where$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("where$1")) {
      return $.WhereIterable$(this, f);
    } else
      return Object.prototype.where$1.call(this, f);
  },
  toList$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("toList$0")) {
      return $.List_List$from(this);
    } else
      return Object.prototype.toList$0.call(this);
  },
  get$isEmpty: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$isEmpty")) {
      return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
    } else
      return Object.prototype.get$isEmpty.call(this);
  },
  add$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("add$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.add$1.call(this, value);
  },
  addLast$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addLast$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addLast$1.call(this, value);
  },
  set$length: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$length")) {
      throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
    } else
      return Object.prototype.set$length.call(this, value);
  },
  clear$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("clear$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
    } else
      return Object.prototype.clear$0.call(this);
  },
  indexOf$2: function(element, start) {
    if (Object.getPrototypeOf(this).hasOwnProperty("indexOf$2")) {
      return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
    } else
      return Object.prototype.indexOf$2.call(this, element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$last")) {
      var t1 = $.getInterceptor$JSStringJSArray(this);
      if ($.gtB(t1.get$length(this), 0)) {
        t1 = t1.get$length(this);
        return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
      }
      throw $.$$throw($.StateError$("No elements"));
    } else
      return Object.prototype.get$last.call(this);
  },
  removeLast$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeLast$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeLast$0.call(this);
  },
  remove$1: function(object) {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.remove$1.call(this, object);
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint8ClampedArray", {
  operator$index$1: function(index) {
    return this[index];
  },
  operator$indexSet$2: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.getInterceptor$JSArray(this).get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  get$isEmpty: function() {
    return $.eq($.getInterceptor$JSStringJSArray(this).get$length(this), 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.getInterceptor$JSStringJSArray(this).get$length(this));
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    var t1 = $.getInterceptor$JSStringJSArray(this);
    if ($.gtB(t1.get$length(this), 0)) {
      t1 = t1.get$length(this);
      return this.operator$index$1($.getInterceptor$JSNumber(t1).operator$sub$1(t1, 1));
    }
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  is$List: function() {
    return true;
  },
  is$Collection: function() {
    return true;
  },
  is$JavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLVideoElement", {"": "height<,width<"});

$.$defineNativeClass("DOMWindow", {"": "history>",
  get$on: function() {
    return $.WindowEvents$(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  alert$1: function(message) {
    return this.alert(message);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("XPathException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLFrameSetElement", {
  get$on: function() {
    return $._FrameSetElementEvents$(this);
  }
});

$.$defineNativeClass("SVGElement", {
  get$classes: function() {
    if (this._cssClassSet == null)
      this._cssClassSet = $._AttributeClassSet$(this);
    return this._cssClassSet;
  },
  get$$$dom_children: function() {
    throw $.$$throw($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  click$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot invoke click SVG."));
  },
  get$click: function() {
    return new $.BoundClosure0(this, "click$0");
  },
  get$id: function() {
    return this.id;
  },
  set$id: function(value) {
    this.id = value;
  }
});

$.$defineNativeClass("SVGException", {
  toString$0: function() {
    return this.toString();
  }
});

// 56 dynamic classes.
// 233 classes
// 21 !leaf
(function() {
  var v0_MediaElement = "HTMLMediaElement|HTMLVideoElement|HTMLAudioElement", v1_SvgElement = "SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGTextContentElement|SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement|SVGTextPathElement|SVGAltGlyphItemElement|SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGCircleElement|SVGClipPathElement|SVGCursorElement|SVGDefsElement|SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncRElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEDiffuseLightingElement|SVGFEDistantLightElement|SVGFEFloodElement|SVGFEConvolveMatrixElement|SVGFEDisplacementMapElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeNodeElement|SVGFEDropShadowElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFEPointLightElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFETileElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphRefElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGHKernElement|SVGGlyphElement|SVGImageElement|SVGLineElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGFontElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGViewElement|SVGVKernElement", v2_Element = [v0_MediaElement, v1_SvgElement, "Element|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLAppletElement|HTMLBaseFontElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLMarqueeElement|HTMLElement|HTMLAnchorElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFormElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement"].join("|"), v3_DocumentFragment = "DocumentFragment|ShadowRoot", v4_CharacterData = "CharacterData|Text|CDATASection|Comment", v5_Document = "Document|SVGDocument|HTMLDocument", v6_Node = [v2_Element, v3_DocumentFragment, v4_CharacterData, v5_Document, "Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction"].join("|");
  $.dynamicSetMetadata([["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["CharacterData", v4_CharacterData], ["HTMLMediaElement", v0_MediaElement], ["Document", v5_Document], ["DocumentFragment", v3_DocumentFragment], ["Uint8Array", "Uint8Array|Uint8ClampedArray"], ["SVGElement", v1_SvgElement], ["Element", v2_Element], ["Node", v6_Node], ["NodeList", "NodeList|RadioNodeList"], ["Event", "Event|RTCDataChannelEvent|RTCIceCandidateEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|UIEvent|TextEvent|TouchEvent|MouseEvent|WheelEvent|CompositionEvent|SVGZoomEvent|KeyboardEvent|TrackEvent|WebKitTransitionEvent|WebGLContextEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|BeforeLoadEvent|DeviceMotionEvent|CloseEvent|CustomEvent|ErrorEvent|DeviceOrientationEvent|HashChangeEvent|ProgressEvent|XMLHttpRequestProgressEvent|AudioProcessingEvent|WebKitAnimationEvent|OfflineAudioCompletionEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OverflowEvent|PageTransitionEvent|PopStateEvent"], ["EventTarget", [v6_Node, "EventTarget|DOMWindow"].join("|")]]);
})();

$.main.call$0 = $.main;

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState !== 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
function generateAccessor(field, prototype) {
  var len = field.length;
  var lastCharCode = field.charCodeAt(len - 1);
  var needsAccessor = (lastCharCode & 63) >= 60;
  if (needsAccessor) {
    var needsGetter = (lastCharCode & 3) > 0;
    var needsSetter = (lastCharCode & 2) == 0;
    var renaming = (lastCharCode & 64) != 0;
    var accessorName = field = field.substring(0, len - 1);
    if (renaming) {
      var divider = field.indexOf(":");
      accessorName = field.substring(0, divider);
      field = field.substring(divider + 1);
    }
    if (needsGetter) {
      var getterString = "return this." + field + ";";
      prototype["get$" + accessorName] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + accessorName] = new Function("v", setterString);
    }
  }
  return field;
};
Isolate.$isolateProperties.$generateAccessor = generateAccessor;
Isolate.$defineClass = function(cls, fields, prototype) {
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateAccessor(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      var fields = desc[''], supr;
      if (typeof fields == 'string') {
        var s = fields.split(';'); supr = s[0];
        fields = s[1] == '' ? [] : s[1].split(',');
      } else {
        supr = desc['super'];
      }
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, fields, desc);
      if (supr) Isolate.$pendingClasses[cls] = supr;
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (!member) continue;          if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } finally {
          if (result === sentinelUndefined) {
            if ($[fieldName] === sentinelInProgress) {
              $[fieldName] = null;
            }
          }
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=game.dart.js.map